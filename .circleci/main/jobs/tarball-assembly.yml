jobs:
  tarball-assembly:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: xlarge
    environment:
      DOCKER_CLI_EXPERIMENTAL: enabled
    parameters:
      number-vcpu:
        default: 4
        type: integer
      vaadin-javamaxmem:
        default: 1g
        type: string
    steps:
      - attach_workspace:
          at: ~/
      - qemu-user-static
      - install-buildx
      - dockerhub-login
      - acr-login
      - run:
          name: Assemble tarballs and related artifacts
          command: |
            export MAVEN_OPTS="-Xmx8g -XX:ReservedCodeCacheSize=1g -XX:+TieredCompilation"
            export MAVEN_ARGS="install"
            export MAVEN_ARGS="install"
            case "${CIRCLE_BRANCH}" in
              "master"*|"release-"*|develop)
                # release branches should enable extra "production" stuff like license indexing
                MAVEN_ARGS="-Dbuild.type=production $MAVEN_ARGS"
                ;;
            esac
            ./assemble.pl -DskipTests=true -Dbuild.skip.tarball=false \
              -Daether.connector.resumeDownloads=false \
              -Daether.connector.basic.threads=1 \
              -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=warn \
              -DvaadinJavaMaxMemory=<< parameters.vaadin-javamaxmem >> \
              -DmaxCpus=<< parameters.number-vcpu >> \
              -Pbuild-bamboo \
              -Prun-expensive-tasks \
              -Dopennms.home=/opt/opennms \
              --batch-mode \
              $MAVEN_ARGS || exit 1
      - run:
          name: Build Minion OCI
          command: |
            cd opennms-container/minion

            # Create always a downloadable single OCI artifact for AMD architecture.
            # This image is used in our integration test suite which relies on the tag "minion:latest".
            make VERSION="$(../pom2version.py ../../pom.xml)" \
                 DOCKER_TAG="minion:latest" \
                 BUILD_NUMBER="${CIRCLE_BUILD_NUM}" \
                 BUILD_URL="${CIRCLE_BUILD_URL}" \
                 BUILD_BRANCH="${CIRCLE_BRANCH}"
      - run:
          name: Collect Artifacts
          command: |
            mkdir -p target/{artifacts,config-schema,tarballs}
            OPENNMS_VERSION="$(.circleci/scripts/pom2version.sh pom.xml)"
            find ./target -name "*.tar.gz" -type f -not -iname '*source*' -exec cp {} "./target/tarballs/opennms-${OPENNMS_VERSION}.tar.gz" \;
            find ./opennms-assemblies/minion/target -name "*.tar.gz" -type f -not -iname '*source*' -exec cp {} "./target/tarballs/minion-${OPENNMS_VERSION}.tar.gz" \;
            find ./opennms-assemblies/sentinel/target -name "*.tar.gz" -type f -not -iname '*source*' -exec cp {} "./target/tarballs/sentinel-${OPENNMS_VERSION}.tar.gz" \;
            cp ./opennms-assemblies/xsds/target/*-xsds.tar.gz "./target/artifacts/opennms-${OPENNMS_VERSION}-xsds.tar.gz"
            cp target/*-source.tar.gz ./target/artifacts/
            cp opennms-container/minion/minion-config-schema.yml "./target/config-schema/"
      - store_artifacts:
          when: always
          path: ~/project/target/artifacts
          destination: artifacts
      - store_artifacts:
          when: always
          path: ~/project/target/config-schema
          destination: config-schema
      - store_artifacts:
          when: always
          path: ~/project/target/tarballs
          destination: tarballs
      - store_artifacts:
          path: ~/project/opennms-container/minion/images/minion.oci
          destination: minion.oci
      - cache-workflow-assets:
          cache_prefix: minion-config-schema
          source_path: target/config-schema/
      - cache-oci:
          key: minion
          path: opennms-container/minion/images/
      - persist_to_workspace:
          root: ~/
          paths:
            - project/opennms-assemblies/minion/target/org.opennms.assemblies.minion-*-minion.tar.gz
