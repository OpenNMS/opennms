version: 2.1

orbs:
  continuation: circleci/continuation@0.2.0
  # path-filtering: circleci/path-filtering@0.1.1

parameters:
  trigger-prebuild:
    description: whether to trigger a pre-build evaluation
    type: boolean
    default: true
  trigger-coverage-api:
    description: whether to trigger a code coverage build
    type: boolean
    default: false
  trigger-automation:
    description: whether to trigger garbage collection for older feature images
    type: boolean
    default: false
  trigger-flaky:
    description: whether to enable running flaky smoke tests
    type: boolean
    default: false

setup: true

commands:
  cached-checkout:
      description: "Checkout with caching"
      steps:
        - restore_cache:
            keys:
              - pre-build-source-v1-{{ .Branch }}-{{ .Revision }}
              - pre-build-source-v1-{{ .Branch }}-
              - pre-build-source-v1-
        - checkout
        - run:
            name: git config merge.renameLimit
            command: git config merge.renameLimit 999999
        - save_cache:
            key: pre-build-source-v1-{{ .Branch }}-{{ .Revision }}
            paths:
              - ".git"
  pack-config:
    description: "Pack the dynamic config in .circleci/main/"
    steps:
      - run:
          name: Pack Dynamic Config
          command: |
            CIRCLE_BIN_DIR="$HOME/.local/bin"
            mkdir -p "$CIRCLE_BIN_DIR"
            export PATH="$CIRCLE_BIN_DIR:$PATH"
            curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR="$CIRCLE_BIN_DIR" bash
            "$CIRCLE_BIN_DIR/circleci" version
            "$CIRCLE_BIN_DIR/circleci" config pack /tmp/.circleci/main --skip-update-check > /tmp/.circleci/main.yml || exit 1
      - store_artifacts:
          path: .circleci/main.yml
          destination: main.yml

workflows:
  coverage:
    when:
      and:
        - equal: [ true, << pipeline.parameters.trigger-coverage-api >> ]
        - equal: [ false, << pipeline.parameters.trigger-prebuild >> ]
        - equal: [ false, << pipeline.parameters.trigger-automation >> ]
        - equal: [ false, << pipeline.parameters.trigger-flaky >> ]
    jobs:
      - trigger-path-filtering:
          base-revision: << pipeline.git.branch >>
          mapping: |
            .*                trigger-coverage true

  pre-build:
    when:
      and:
        - equal: [ false, << pipeline.parameters.trigger-coverage-api >> ]
        - equal: [ true, << pipeline.parameters.trigger-prebuild >> ]
        - equal: [ false, << pipeline.parameters.trigger-automation >> ]
        - equal: [ false, << pipeline.parameters.trigger-flaky >> ]
    jobs:
      - trigger-path-filtering:
          base-revision: << pipeline.git.branch >>
          mapping: |
            .*                trigger-coverage    false
            .*                trigger-flaky-smoke false
            ((?!docs/).)*     trigger-build       true
            docs/.*           trigger-docs        true
            ui/.*             trigger-ui          true
            .circleci/.*      trigger-build       true
            .circleci/main/jobs/build/build-docs.yml trigger-docs        true
            .circleci/main/jobs/build/build-ui.yml trigger-ui        true

  pre-build-with-flaky:
    when:
      and:
        - equal: [ false, << pipeline.parameters.trigger-coverage-api >> ]
        - equal: [ true, << pipeline.parameters.trigger-prebuild >> ]
        - equal: [ false, << pipeline.parameters.trigger-automation >> ]
        - equal: [ true, << pipeline.parameters.trigger-flaky >> ]
    jobs:
      - trigger-path-filtering:
          base-revision: << pipeline.git.branch >>
          mapping: |
            .*                trigger-coverage    false
            .*                trigger-flaky-smoke true
            ((?!docs/).)*     trigger-build       true
            docs/.*           trigger-docs        true
            ui/.*             trigger-ui          true
            .circleci/.*      trigger-build       true
            .circleci/main/jobs/build/build-docs.yml trigger-docs        true
            .circleci/main/jobs/build/build-ui.yml trigger-ui        true

  automation:
    when:
      and:
        - equal: [ false, << pipeline.parameters.trigger-coverage-api >> ]
        - equal: [ false, << pipeline.parameters.trigger-prebuild >> ]
        - equal: [ true, << pipeline.parameters.trigger-automation >> ]
    jobs:
      - docker_gc

jobs:
  docker_gc:
    docker:
      - image: docker
    steps:
      - run:
          name:  Docker GC - remove inactive images on feature branches
          # TODO replace expect when https://github.com/docker/hub-tool/pull/198 is merged
          command: |
            wget https://github.com/docker/hub-tool/releases/download/v0.4.4/hub-tool-linux-amd64.tar.gz
            tar -xzf hub-tool-linux-amd64.tar.gz
            apk update
            apk add expect
            expect_commands="
            spawn hub-tool/hub-tool login ${DOCKERHUB_LOGIN}
            expect 'Password:'
            send \"${DOCKERHUB_PASS}\n\"
            interact"
            expect -c "${expect_commands//
            /;}"
            GC_LIST=$( hub-tool/hub-tool tag ls opennms/horizon | ( grep feature || true ) | ( grep inactive || true ) | cut -d" " -f1 )
            for image in $GC_LIST; do
              echo "Delete image $image"
              ( yes || true ) | hub-tool/hub-tool tag rm $image
            done

  trigger-coverage:
    docker:
      - image: cimg/python:3.10.1
    steps:
      - cached-checkout
      #- pack-config
      - continuation/continue:
          circleci_domain: circleci.com
          configuration_path: .circleci/main.yml
          parameters: '{ "trigger-coverage": true }'

  trigger-path-filtering:
    docker:
      - image: cimg/python:3.10.1
    parameters:
      base-revision:
        default: main
        description: The revision to compare the current one against for the purpose of determining changed files.
        type: string
      mapping:
        default: ""
        description: Mapping of path regular expressions to pipeline parameters and values. One mapping per line, whitespace-delimited.
        type: string
    steps:
      - cached-checkout
      # copied from https://circleci.com/developer/orbs/orb/circleci/path-filtering
      # we do it ourselves because otherwise we have to do a full un-cached checkout every time
      - run:
          name: process mapping
          environment:
            BASE_REVISION: << parameters.base-revision >>
            MAPPING: << parameters.mapping >>
            OUTPUT_PATH: /tmp/pipeline-parameters.json
          command: python3 .circleci/pyscripts/process_mapping.py     
      - run:
          name: Generate Main YAML file
          command: python3 .circleci/pyscripts/generate_main.py 
      #- pack-config
      - run:
          name: check for empty trigger config
          command: |
            if [ "$(grep -c trigger-coverage /tmp/pipeline-parameters.json)" -eq 0 ]; then
              if [ "$(grep -c trigger-prebuild /tmp/pipeline-parameters.json)" -eq 0 ]; then
                # this can happen in the case of merges or other similar "empty" commits
                echo '{ "trigger-prebuild": false, "trigger-build": true }' > /tmp/pipeline-parameters.json
              fi
            fi
      - store_artifacts:
          path: /tmp/pipeline-parameters.json
          destination: pipeline-parameters.json
      - continuation/continue:
          circleci_domain: circleci.com
          configuration_path: /tmp/.circleci/main.yml
          parameters: /tmp/pipeline-parameters.json
