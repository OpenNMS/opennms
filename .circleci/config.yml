version: 2.1

orbs:
  continuation: circleci/continuation@0.3.1
  # path-filtering: circleci/path-filtering@0.1.3

parameters:
  trigger-prebuild:
    description: whether to trigger a pre-build evaluation
    type: boolean
    default: true
  trigger-coverage-api:
    description: whether to trigger a code coverage build
    type: boolean
    default: false
  trigger-automation:
    description: whether to trigger garbage collection for older feature images
    type: boolean
    default: false
  trigger-flaky:
    description: whether to enable running flaky smoke tests
    type: boolean
    default: false
  is_pr:
    description: whether this build is a pull request (only valid in non-setup workflows)
    type: boolean
    default: false

setup: true

commands:
  shallow-clone:
      description: "Quick shallow checkout (if possible)"
      steps:
        - run:
            name: git clone
            command: |
              install -d -m 700 ~/.ssh
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              ssh-keyscan -p 443 ssh.github.com >> ~/.ssh/known_hosts
              chmod 600 ~/.ssh/known_hosts
              git clone --no-checkout --filter=tree:0 "${CIRCLE_REPOSITORY_URL}" .
              if [ -n "${CIRCLE_TAG}" ]; then
                git checkout --force "${CIRCLE_TAG}"
                git reset --hard "${CIRCLE_SHA1}"
              else
                git checkout --force -B "${CIRCLE_BRANCH}" "${CIRCLE_SHA1}"
              fi
  verify-config:
    description: "Verify generated main.yml file"
    steps:
      - run:
          name: Verify Dynamic Config
          command: |
            CIRCLE_BIN_DIR="$HOME/.local/bin"
            mkdir -p "$CIRCLE_BIN_DIR"
            export PATH="$CIRCLE_BIN_DIR:$PATH"
            curl -fLSs https://raw.githubusercontent.com/CircleCI-Public/circleci-cli/master/install.sh | DESTDIR="$CIRCLE_BIN_DIR" bash
            "$CIRCLE_BIN_DIR/circleci" version
            "$CIRCLE_BIN_DIR/circleci" config validate --skip-update-check /tmp/.circleci/main.yml || exit 1

workflows:
  coverage:
    when:
      and:
        - equal: [ true, << pipeline.parameters.trigger-coverage-api >> ]
        - equal: [ false, << pipeline.parameters.trigger-prebuild >> ]
        - equal: [ false, << pipeline.parameters.trigger-automation >> ]
        - equal: [ false, << pipeline.parameters.trigger-flaky >> ]
    jobs:
      - trigger-path-filtering:
          base-revision: << pipeline.git.branch >>
          mapping: |
            .*                trigger-coverage true

  pre-build:
    when:
      and:
        - equal: [ false, << pipeline.parameters.trigger-coverage-api >> ]
        - equal: [ true, << pipeline.parameters.trigger-prebuild >> ]
        - equal: [ false, << pipeline.parameters.trigger-automation >> ]
        - equal: [ false, << pipeline.parameters.trigger-flaky >> ]
    jobs:
      - trigger-path-filtering:
          base-revision: << pipeline.git.branch >>
          mapping: |
            .*                trigger-coverage    false
            .*                trigger-flaky-smoke false
            ((?!docs/).)*     trigger-build       true
            docs/.*           trigger-docs        true
            ui/.*             trigger-ui          true
            .circleci/.*      trigger-build       true
            .circleci/main/jobs/build/build-docs.yml trigger-docs        true
            .circleci/main/jobs/build/build-ui.yml trigger-ui        true
            antora-playbook-local.yml      trigger-docs        true

  pre-build-with-flaky:
    when:
      and:
        - equal: [ false, << pipeline.parameters.trigger-coverage-api >> ]
        - equal: [ true, << pipeline.parameters.trigger-prebuild >> ]
        - equal: [ false, << pipeline.parameters.trigger-automation >> ]
        - equal: [ true, << pipeline.parameters.trigger-flaky >> ]
    jobs:
      - trigger-path-filtering:
          base-revision: << pipeline.git.branch >>
          mapping: |
            .*                trigger-coverage    false
            .*                trigger-flaky-smoke true
            ((?!docs/).)*     trigger-build       true
            docs/.*           trigger-docs        true
            ui/.*             trigger-ui          true
            .circleci/.*      trigger-build       true
            .circleci/main/jobs/build/build-docs.yml trigger-docs        true
            .circleci/main/jobs/build/build-ui.yml trigger-ui        true
            antora-playbook-local.yml      trigger-docs        true

  automation:
    when:
      and:
        - equal: [ false, << pipeline.parameters.trigger-coverage-api >> ]
        - equal: [ false, << pipeline.parameters.trigger-prebuild >> ]
        - equal: [ true, << pipeline.parameters.trigger-automation >> ]
    jobs:
      - docker_gc:
          context:
            - "CircleCI"
            - "docker-publish-account"
jobs:
  docker_gc:
    docker:
      - image: docker
    steps:
      - run:
          name:  Docker GC - remove inactive images on feature branches
          # TODO replace expect when https://github.com/docker/hub-tool/pull/198 is merged
          command: |
            wget https://github.com/docker/hub-tool/releases/download/v0.4.5/hub-tool-linux-amd64.tar.gz
            tar -xzf hub-tool-linux-amd64.tar.gz
            cd hub-tool
            DOCKERHUB_AUTH_HASH="$(echo -n "${DOCKERHUB_LOGIN}:${DOCKERHUB_PASS}" | base64)"
            echo "{ \"auths\": { \"hub-tool\": { \"auth\": \"${DOCKERHUB_AUTH_HASH}\" } } }" > config.json
            export DOCKER_CONFIG="$(pwd)"
            for HUB_REPO in horizon minion sentinel meridian-minion; do
              GC_LIST=$( ./hub-tool tag ls "opennms/${HUB_REPO}" | ( grep -E '^[^:][^:]*:(feature|jira|dependabot)' || true ) | ( grep inactive || true ) | cut -d" " -f1 )
              for image in $GC_LIST; do
                echo "Delete image $image"
                ( yes || true ) | ./hub-tool tag rm $image
              done
            done

  trigger-coverage:
    docker:
      - image: cimg/python:3.10.1
    steps:
      - shallow-clone
      - run:
          name: Creating build-trigger file
          command: |
               cp .circleci/example-build-triggers.override.json /tmp/build-triggers.json
               sed -i 's/"coverage": false/"coverage": true/g' /tmp/build-triggers.json
      - store_artifacts:
          path: /tmp/build-triggers.json
          destination: build-triggers.json      
      - continuation/continue:
          circleci_domain: circleci.com
          configuration_path: .circleci/main.yml
          parameters: '{ "trigger-coverage": true }'

  trigger-path-filtering:
    docker:
      - image: cimg/python:3.10.1
    parameters:
      base-revision:
        default: main
        description: The revision to compare the current one against for the purpose of determining changed files.
        type: string
      mapping:
        default: ""
        description: Mapping of path regular expressions to pipeline parameters and values. One mapping per line, whitespace-delimited.
        type: string
    steps:
      - shallow-clone
      - run:
          name: Trigger Status
          command: |
            echo Coverage API: << pipeline.parameters.trigger-coverage-api >>
            echo Prebuild: << pipeline.parameters.trigger-prebuild >>
            echo Automation: << pipeline.parameters.trigger-automation >>
            echo Trigger Flaky Tests: << pipeline.parameters.trigger-flaky >>
      - run:
          name: Process Generate
          environment:
            BASE_REVISION: << parameters.base-revision >>
            MAPPING: << parameters.mapping >>
            OUTPUT_PATH: /tmp/pipeline-parameters.json
          command: python3 .circleci/pyscripts/process_generate.py 
      - run:
          name: Generate Main YAML file
          command: python3 .circleci/pyscripts/generate_main.py 
      - verify-config
      - store_artifacts:
          path: /tmp/pipeline-parameters.json
          destination: pipeline-parameters.json
      - store_artifacts:
          path: /tmp/build-triggers.json
          destination: build-triggers.json
      - store_artifacts:
          path: /tmp/.circleci/main.yml
          destination: main.yml
      - store_artifacts:
          path: /tmp/performance.txt
          destination: performance.txt
      - continuation/continue:
          circleci_domain: circleci.com
          configuration_path: /tmp/.circleci/main.yml
          parameters: /tmp/pipeline-parameters.json
