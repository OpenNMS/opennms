/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2008-2017 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2017 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2017.02.13 at 11:07:59 AM EST 
//


package org.opennms.netmgt.config.rtc;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;
import java.util.Objects;


/**
 * <p>Java class for anonymous complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType&gt;
 *   &lt;complexContent&gt;
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType"&gt;
 *       &lt;attribute name="updaters" use="required"&gt;
 *         &lt;simpleType&gt;
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int"&gt;
 *             &lt;minInclusive value="1"/&gt;
 *           &lt;/restriction&gt;
 *         &lt;/simpleType&gt;
 *       &lt;/attribute&gt;
 *       &lt;attribute name="senders" use="required"&gt;
 *         &lt;simpleType&gt;
 *           &lt;restriction base="{http://www.w3.org/2001/XMLSchema}int"&gt;
 *             &lt;minInclusive value="1"/&gt;
 *           &lt;/restriction&gt;
 *         &lt;/simpleType&gt;
 *       &lt;/attribute&gt;
 *       &lt;attribute name="rollingWindow" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="maxEventsBeforeResend" use="required" type="{http://www.w3.org/2001/XMLSchema}int" /&gt;
 *       &lt;attribute name="lowThresholdInterval" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="highThresholdInterval" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="userRefreshInterval" use="required" type="{http://www.w3.org/2001/XMLSchema}string" /&gt;
 *       &lt;attribute name="errorsBeforeUrlUnsubscribe" use="required" type="{http://www.w3.org/2001/XMLSchema}int" /&gt;
 *     &lt;/restriction&gt;
 *   &lt;/complexContent&gt;
 * &lt;/complexType&gt;
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "")
@XmlRootElement(name = "RTCConfiguration")
public class RTCConfiguration {

    @XmlAttribute(name = "updaters", required = true)
    protected int updaters;
    @XmlAttribute(name = "senders", required = true)
    protected int senders;
    @XmlAttribute(name = "rollingWindow", required = true)
    protected String rollingWindow;
    @XmlAttribute(name = "maxEventsBeforeResend", required = true)
    protected int maxEventsBeforeResend;
    @XmlAttribute(name = "lowThresholdInterval", required = true)
    protected String lowThresholdInterval;
    @XmlAttribute(name = "highThresholdInterval", required = true)
    protected String highThresholdInterval;
    @XmlAttribute(name = "userRefreshInterval", required = true)
    protected String userRefreshInterval;
    @XmlAttribute(name = "errorsBeforeUrlUnsubscribe", required = true)
    protected int errorsBeforeUrlUnsubscribe;

    /**
     * Gets the value of the updaters property.
     * 
     */
    public int getUpdaters() {
        return updaters;
    }

    /**
     * Sets the value of the updaters property.
     * 
     */
    public void setUpdaters(int value) {
        this.updaters = value;
    }

    /**
     * Gets the value of the senders property.
     * 
     */
    public int getSenders() {
        return senders;
    }

    /**
     * Sets the value of the senders property.
     * 
     */
    public void setSenders(int value) {
        this.senders = value;
    }

    /**
     * Gets the value of the rollingWindow property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getRollingWindow() {
        return rollingWindow;
    }

    /**
     * Sets the value of the rollingWindow property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setRollingWindow(String value) {
        this.rollingWindow = value;
    }

    /**
     * Gets the value of the maxEventsBeforeResend property.
     * 
     */
    public int getMaxEventsBeforeResend() {
        return maxEventsBeforeResend;
    }

    /**
     * Sets the value of the maxEventsBeforeResend property.
     * 
     */
    public void setMaxEventsBeforeResend(int value) {
        this.maxEventsBeforeResend = value;
    }

    /**
     * Gets the value of the lowThresholdInterval property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getLowThresholdInterval() {
        return lowThresholdInterval;
    }

    /**
     * Sets the value of the lowThresholdInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setLowThresholdInterval(String value) {
        this.lowThresholdInterval = value;
    }

    /**
     * Gets the value of the highThresholdInterval property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getHighThresholdInterval() {
        return highThresholdInterval;
    }

    /**
     * Sets the value of the highThresholdInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setHighThresholdInterval(String value) {
        this.highThresholdInterval = value;
    }

    /**
     * Gets the value of the userRefreshInterval property.
     * 
     * @return
     *     possible object is
     *     {@link String }
     *     
     */
    public String getUserRefreshInterval() {
        return userRefreshInterval;
    }

    /**
     * Sets the value of the userRefreshInterval property.
     * 
     * @param value
     *     allowed object is
     *     {@link String }
     *     
     */
    public void setUserRefreshInterval(String value) {
        this.userRefreshInterval = value;
    }

    /**
     * Gets the value of the errorsBeforeUrlUnsubscribe property.
     * 
     */
    public int getErrorsBeforeUrlUnsubscribe() {
        return errorsBeforeUrlUnsubscribe;
    }

    /**
     * Sets the value of the errorsBeforeUrlUnsubscribe property.
     * 
     */
    public void setErrorsBeforeUrlUnsubscribe(int value) {
        this.errorsBeforeUrlUnsubscribe = value;
    }

    @Override
    public boolean equals(final Object other) {
        if (!(other instanceof RTCConfiguration)) {
            return false;
        }
        RTCConfiguration castOther = (RTCConfiguration) other;
        return Objects.equals(updaters, castOther.updaters) && Objects.equals(senders, castOther.senders)
                && Objects.equals(rollingWindow, castOther.rollingWindow)
                && Objects.equals(maxEventsBeforeResend, castOther.maxEventsBeforeResend)
                && Objects.equals(lowThresholdInterval, castOther.lowThresholdInterval)
                && Objects.equals(highThresholdInterval, castOther.highThresholdInterval)
                && Objects.equals(userRefreshInterval, castOther.userRefreshInterval)
                && Objects.equals(errorsBeforeUrlUnsubscribe, castOther.errorsBeforeUrlUnsubscribe);
    }

    @Override
    public int hashCode() {
        return Objects.hash(updaters, senders, rollingWindow, maxEventsBeforeResend, lowThresholdInterval,
                highThresholdInterval, userRefreshInterval, errorsBeforeUrlUnsubscribe);
    }

}
