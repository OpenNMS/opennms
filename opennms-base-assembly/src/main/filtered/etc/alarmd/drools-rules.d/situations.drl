/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2018 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2018 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

package org.opennms.netmgt.alarmd.drools;

import java.util.Date;
import java.util.List;
import org.kie.api.time.SessionClock;
import org.opennms.netmgt.model.OnmsAlarm;
import org.opennms.netmgt.model.OnmsSeverity;
import org.opennms.netmgt.model.TroubleTicketState;
import java.util.LinkedList;

global org.opennms.netmgt.alarmd.drools.AlarmService alarmService;

declare org.opennms.netmgt.model.OnmsAlarm
    @role(event)
    @timestamp(lastUpdateTime)
end

rule "setSituationSeverityToMaxAlarmSeverity"
  when
    $situation : OnmsAlarm( isSituation() == true, $relatedAlarmIds : relatedAlarmIds )
    $relatedAlarms : LinkedList() from collect( OnmsAlarm($relatedAlarmIds contains id) )
    $maxSeverity : OnmsSeverity() from accumulate( OnmsAlarm( $severity : severity ) from $relatedAlarms, maxSeverity( $severity ) )
    OnmsAlarm( this == $situation, severity != $maxSeverity )
  then
    Date now = new Date(drools.getWorkingMemory().getSessionClock().getCurrentTime());
    alarmService.setSeverity($situation, $maxSeverity, now);
end

rule "acknowledgeSituation"
  when
    $situation : OnmsAlarm( isSituation() == true, $relatedAlarmIds : relatedAlarmIds, isAcknowledged() == true )
    $relatedAlarms : LinkedList() from collect( OnmsAlarm($relatedAlarmIds contains id, isAcknowledged() == false,  firstEventTime < $situation.getAlarmAckTime() ) )
  then
    Date acknowledgeTime = $situation.getAlarmAckTime();
    for (int i=0; i < $relatedAlarms.size(); i++) {
    	alarmService.acknowledgeAlarm((OnmsAlarm)$relatedAlarms.get(i), acknowledgeTime);
    }
end

rule "allAlarmsAcknowledgeSituation"
  when
    $situation : OnmsAlarm( isSituation() == true, $relatedAlarmIds : relatedAlarmIds, isAcknowledged() == false )
    List(size == $relatedAlarmIds.size) from collect (OnmsAlarm($relatedAlarmIds contains id, isAcknowledged() == true) )
  then
    // TODO - pull latest AckTime from Alarms - Date acknowledgeTime = $situation.getAlarmAckTime();
    Date acknowledgeTime = new Date(drools.getWorkingMemory().getSessionClock().getCurrentTime());
   	alarmService.acknowledgeAlarm((OnmsAlarm)$situation, acknowledgeTime);
end

