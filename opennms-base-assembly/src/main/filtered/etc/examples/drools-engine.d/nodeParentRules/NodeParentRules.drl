package org.opennms.netmgt.correlation.drools

import java.util.Date;

import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.correlation.drools.Cause.Type;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.model.events.EventUtils;
import org.opennms.netmgt.events.api.EventConstants;
import org.drools.core.spi.KnowledgeHelper;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.drools.NodeService nodeService;
global java.lang.Long POLL_INTERVAL;
global org.slf4j.Logger LOG;


rule "newIssue"
	salience 100
	when
		$e : Event( $uei : uei matches ".*nodeDown", $nodeid : nodeid )
		not( Cause( cause == $nodeid ) )
	then
		Cause $c = new Cause( Type.POSSIBLE, $nodeid, $e );
		println( "Found nodeDown event " + $uei + " for node " + $nodeid +". Asserting: " + $c );
		insert( $c );
end

rule "possibleCauses"
	salience 200
	when
		$c : Cause( $cause : cause, $e : symptom )
		not( Cause( cause == ( nodeService.getParentNode( $cause ) ) ) )
	then
		Long $parentNode = nodeService.getParentNode( $cause );
		if ( $parentNode != null ) {
			Cause $parent = possibleCause( engine, $parentNode, $e, POLL_INTERVAL );
			$parent.addImpacted( $c );
			println( "No Cause for parent. Asserting: " + $parent );
			insert( $parent );
		} else {
			println( "No parent for node " + $cause );
		}
end

rule "existingCause"
	salience 200
	when
		$c : Cause( $cause : cause, $e : symptom )
		$parent : Cause( cause == ( nodeService.getParentNode( $cause ) ), impacted excludes $c )
	then
		$parent.addImpacted( $c );
		println(" Adding cause " + $c +" to existing parent " + $parent );
		update( $parent );
end
 
rule "resolveIssue"
	salience 100
	when
		$up : Event( $upUei : uei matches ".*nodeUp", $node : nodeid )
		$down : Event( uei matches ".*nodeDown", nodeid == $node )
	then
		println( "Found nodeUp event " + $upUei + " for node " + $node );
		retract( $down );
		retract( $up );
end

function Cause possibleCause( DroolsCorrelationEngine engine, Long nodeId, Event symptom, Long POLL_INTERVAL ) {
	return new Cause( Type.POSSIBLE, nodeId, symptom, engine.setTimer( POLL_INTERVAL ) );
}

//function void foundRootCause( DroolsCorrelationEngine engine, PossibleCause cause ) {
//	EventBuilder bldr = new EventBuilder( "rootCauseEvent", "Drools" );
//	bldr.setNodeid((int)cause.getSymptom().getNodeid());
//	bldr.addParam("rootCause", cause.getCause().intValue());
//	
//	engine.sendEvent(bldr.getEvent());
//}

function void println(Object msg) {
	System.out.println(new Date() + " : " + msg);
}


