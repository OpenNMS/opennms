<?xml version="1.0" encoding="UTF-8"?>
<web-app id="opennms" version="3.0"
  xmlns="http://java.sun.com/xml/ns/javaee"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
>
    <jsp-config>
        <taglib>
            <taglib-uri>http://www.springframework.org/tags/form</taglib-uri>
            <taglib-location>/WEB-INF/spring-form.tld</taglib-location>
        </taglib>
        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <page-encoding>UTF-8</page-encoding>
        </jsp-property-group>
    </jsp-config>

  <display-name>opennms</display-name>

  <!-- Uncomment this to set the webapp timeout to infinite.
  <session-config>
    <session-timeout>-1</session-timeout>
  </session-config>
  -->

  <!--  This is used by the Spring ContextLoaderListener <listener> below -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>
        <!-- From opennms-webapp -->
        /WEB-INF/applicationContext-common.xml
        /WEB-INF/applicationContext-spring-security.xml
        /WEB-INF/applicationContext-spring-webflow.xml
        /WEB-INF/spring-security.d/*.xml
        classpath:/org/opennms/web/svclayer/applicationContext-svclayer.xml

        <!-- From opennms-reporting -->
        classpath:/META-INF/opennms/applicationContext-reporting.xml
        <!-- From org.opennms.features.reporting.core -->
        classpath:/META-INF/opennms/applicationContext-reportingCore.xml
        <!-- From org.opennms.features.reporting.dao -->
        classpath:/META-INF/opennms/applicationContext-reportingDao.xml
        <!-- From org.opennms.features.reporting.repository -->
        classpath:/META-INF/opennms/applicationContext-reportingRepository.xml
        <!-- From org.opennms.features.system-report -->
        classpath:/META-INF/opennms/applicationContext-systemReport.xml

        classpath*:/META-INF/opennms/component-measurement.xml
        classpath*:/META-INF/opennms/component-service.xml
        classpath*:/META-INF/opennms/component-reporting.xml

        <!-- WARMERGE: insert contextConfigLocation -->
    </param-value>
  </context-param>

  <context-param>
    <param-name>parentContextKey</param-name>
    <param-value>daoContext</param-value>
  </context-param>

  <!-- WARMERGE: insert context-param -->

  <filter>
    <!-- This filter has to come before other filters. -->
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
        <param-name>encoding</param-name>
        <param-value>UTF-8</param-value>
    </init-param>
  </filter>

  <filter>
    <!--  note the name of this filter is important and is used in the app contexts -->
    <filter-name>springSecurityFilterChain</filter-name>
    <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
  </filter>

  <!-- filter out invalid file:// Origin: header to avoid CORS issues with Compass -->
  <filter>
    <description>Filter out invalid file:// Origin: header to avoid CORS issues with Compass</description>
    <filter-name>Origin Filter</filter-name>
    <filter-class>org.opennms.web.api.OriginHeaderFilter</filter-class>
  </filter>

  <!-- NOTE, this filter is not mapped to anything by default.  To enable CORS for ReST,
       uncomment the "CORS Filter" <filter-mapping> section later in this file. -->
  <filter>
    <description>Allows "cross-site scripting" for the REST services.</description>
    <filter-name>CORS Filter</filter-name>
    <filter-class>org.ebaysf.web.cors.CORSFilter</filter-class>
    <!-- See https://github.com/eBay/cors-filter for a full list of parameters -->
    <init-param>
      <param-name>cors.allowed.origins</param-name>
      <param-value>*</param-value>
    </init-param>
    <init-param>
      <param-name>cors.allowed.methods</param-name>
      <param-value>GET,PUT,POST,HEAD,OPTIONS,DELETE</param-value>
    </init-param>
    <init-param>
      <param-name>cors.allowed.headers</param-name>
      <param-value>Accept,Access-Control-Request-Headers,Access-Control-Request-Method,Authorization,Content-Type,Origin,X-Requested-With</param-value>
    </init-param>
    <init-param>
      <param-name>cors.support.credentials</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>

  <filter>
    <description>Adds the refresh HTTP header to a servlet's or JSP's output so it will be automatically reloaded.</description>
    <filter-name>AddRefreshHeader-300</filter-name>
    <filter-class>org.opennms.web.servlet.AddRefreshHeaderFilter</filter-class>
    <init-param>
      <description>This parameter specifies how often to refresh the page.</description>
      <param-name>seconds</param-name>
      <param-value>300</param-value>
    </init-param>
  </filter>

  <filter>
    <description>Adds the refresh HTTP header to a servlet's or JSP's output so it will be automatically reloaded.</description>
    <filter-name>AddRefreshHeader-120</filter-name>
    <filter-class>org.opennms.web.servlet.AddRefreshHeaderFilter</filter-class>
    <init-param>
      <description>This parameter specifies how often to refresh the page.</description>
      <param-name>seconds</param-name>
      <param-value>120</param-value>
    </init-param>
  </filter>

  <filter>
    <description>Adds the refresh HTTP header to a servlet's or JSP's output so it will be automatically reloaded.</description>
    <filter-name>AddRefreshHeader-30</filter-name>
    <filter-class>org.opennms.web.servlet.AddRefreshHeaderFilter</filter-class>
    <init-param>
      <description>This parameter specifies how often to refresh the page.</description>
      <param-name>seconds</param-name>
      <param-value>30</param-value>
    </init-param>
  </filter>


  <filter>
    <description>Stores HTTP request parameters in request attributes for later access</description>
    <filter-name>StoreRequestProperties</filter-name>
    <filter-class>org.opennms.web.servlet.StoreRequestPropertiesFilter</filter-class>
    <init-param>
      <description>Into which request attribute the value of HttpServletRequest.getServletPath() is stored</description>
      <param-name>relativeServletPathAttribute</param-name>
      <param-value>relativeRequestPath</param-value>
    </init-param>
  </filter>

  <filter>
    <filter-name>openSessionInViewFilter</filter-name>
    <filter-class>org.springframework.orm.hibernate3.support.OpenSessionInViewFilter</filter-class>
  </filter>

  <filter>
    <filter-name>eXtremeExport</filter-name>
    <filter-class>org.extremecomponents.table.filter.ExportFilter</filter-class>
  </filter>

  <filter>
    <filter-name>UrlRewriteFilter</filter-name>
    <filter-class>org.tuckey.web.filters.urlrewrite.UrlRewriteFilter</filter-class>
    <init-param>
      <param-name>statusEnabled</param-name>
      <param-value>false</param-value>
    </init-param>
  </filter>

  <!-- WARMERGE: insert filter -->

  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>openSessionInViewFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>Origin Filter</filter-name>
    <url-pattern>/rest/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>Origin Filter</filter-name>
    <url-pattern>/nrt/*</url-pattern>
  </filter-mapping>

  <!--
  <filter-mapping>
    <filter-name>CORS Filter</filter-name>
    <url-pattern>/rest/*</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>CORS Filter</filter-name>
    <url-pattern>/nrt/*</url-pattern>
  </filter-mapping>
  -->

  <filter-mapping>
    <filter-name>springSecurityFilterChain</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>StoreRequestProperties</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/index.jsp</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/rtc/category.jsp</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/element/node.jsp</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/element/linkednode.jsp</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/element/interface.jsp</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/element/service.jsp</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/outage/list.htm</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/graph/results.htm</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/KSC/customView.htm</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-120</filter-name>
    <url-pattern>/event/list</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-30</filter-name>
    <url-pattern>/alarm/list.htm</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>AddRefreshHeader-300</filter-name>
    <url-pattern>/alarm/detail.htm</url-pattern>
  </filter-mapping>
  <filter-mapping>
    <filter-name>eXtremeExport</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <filter-mapping>
    <filter-name>UrlRewriteFilter</filter-name>
    <url-pattern>*.jnlp</url-pattern>
    <dispatcher>REQUEST</dispatcher>
    <dispatcher>FORWARD</dispatcher>
  </filter-mapping>

  <!-- WARMERGE: insert filter-mapping -->

  <!--
    This listener handles setting OpenNMS-specific context properties
    and starts and stops the RTC subscription timer.
  -->
  <listener>
    <listener-class>org.opennms.web.servlet.InitializerServletContextListener</listener-class>
  </listener>

  <!-- Bootstrap listener to start up and shut down Spring's root WebApplicationContext. -->
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!-- NrtCollection -->
    <context-param>
        <description>The URL of the Message Broker to connect to</description>
        <param-name>org.apache.activemq.brokerURL</param-name>
        <param-value>tcp://localhost:61616</param-value>
    </context-param>

  <!-- WARMERGE: insert listener -->

  <!--
    Configure the JspServlet to use updated compiler syntax.

    WARNING: There is a bug in our version of the Glassfish JSP library
    that causes crashes when using any Java 8 lambdas. The bytecode that
    is generated from compiling lambdas triggers this bug:

    https://bz.apache.org/bugzilla/show_bug.cgi?id=54475

    So we need to leave the language level at Java 7 until we upgrade to
    at least Jetty 9.1 to get lambda support. :-/

    http://issues.opennms.org/browse/NMS-8289

    Ugh, and I just figured out that the jetty-jspc-maven-plugin doesn't
    support editing this value at all so we're stuck with whatever it
    defaults to (Java 1.5). Commenting this section out.
  -->
  <!--
  <servlet id="jsp">
    <servlet-name>jsp</servlet-name>
    <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
    <init-param>
      <param-name>compilerSourceVM</param-name>
      <param-value>1.7</param-value>
    </init-param>
    <init-param>
      <param-name>compilerTargetVM</param-name>
      <param-value>1.7</param-value>
    </init-param>
    <load-on-startup>0</load-on-startup>
  </servlet>
  -->

  <!-- ==================================================================== -->
  <!-- The default servlet.                                                 -->
  <!-- This servlet, normally mapped to /, provides the handling for static -->
  <!-- content, OPTIONS and TRACE methods for the context.                  -->
  <!-- The following initParameters are supported:                          -->
  <!--
 *  acceptRanges      If true, range requests and responses are
 *                    supported
 *
 *  dirAllowed        If true, directory listings are returned if no
 *                    welcome file is found. Else 403 Forbidden.
 *
 *  welcomeServlets   If true, attempt to dispatch to welcome files
 *                    that are servlets, but only after no matching static
 *                    resources could be found. If false, then a welcome
 *                    file must exist on disk. If "exact", then exact
 *                    servlet matches are supported without an existing file.
 *                    Default is true.
 *
 *                    This must be false if you want directory listings,
 *                    but have index.jsp in your welcome file list.
 *
 *  redirectWelcome   If true, welcome files are redirected rather than
 *                    forwarded to.
 *
 *  gzip              If set to true, then static content will be served as
 *                    gzip content encoded if a matching resource is
 *                    found ending with ".gz"
 *
 *  resourceBase      Set to replace the context resource base
 *
 *  resourceCache     If set, this is a context attribute name, which the servlet
 *                    will use to look for a shared ResourceCache instance.
 *
 *  relativeResourceBase
 *                    Set with a pathname relative to the base of the
 *                    servlet context root. Useful for only serving static content out
 *                    of only specific subdirectories.
 *
 *  aliases           If True, aliases of resources are allowed (eg. symbolic
 *                    links and caps variations). May bypass security constraints.
 *
 *  maxCacheSize      The maximum total size of the cache or 0 for no cache.
 *  maxCachedFileSize The maximum size of a file to cache
 *  maxCachedFiles    The maximum number of files to cache
 *
 *  useFileMappedBuffer
 *                    If set to true, it will use mapped file buffer to serve static content
 *                    when using NIO connector. Setting this value to false means that
 *                    a direct buffer will be used instead of a mapped file buffer.
 *                    By default, this is set to true.
 *
 *  cacheControl      If set, all static content will have this value set as the cache-control
 *                    header.
 -->
  <!-- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -  -->
  <servlet>
    <servlet-name>default</servlet-name>
    <servlet-class>org.eclipse.jetty.servlet.DefaultServlet</servlet-class>
    <init-param>
      <param-name>aliases</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <param-name>acceptRanges</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>dirAllowed</param-name>
      <param-value>false</param-value> <!-- NMS-3475 -->
    </init-param>
    <init-param>
      <param-name>welcomeServlets</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <param-name>redirectWelcome</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <param-name>maxCacheSize</param-name>
      <param-value>256000000</param-value>
    </init-param>
    <init-param>
      <param-name>maxCachedFileSize</param-name>
      <param-value>200000000</param-value>
    </init-param>
    <init-param>
      <param-name>maxCachedFiles</param-name>
      <param-value>2048</param-value>
    </init-param>
    <init-param>
      <param-name>gzip</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>useFileMappedBuffer</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>resourceCache</param-name>
      <param-value>resourceCache</param-value>
    </init-param>
    <!--
    <init-param>
      <param-name>cacheControl</param-name>
      <param-value>max-age=3600,public</param-value>
    </init-param>
    -->
    <load-on-startup>0</load-on-startup>
  </servlet>

  <servlet>
    <servlet-name>docsDirectory</servlet-name>
    <servlet-class>org.eclipse.jetty.servlet.DefaultServlet</servlet-class>
    <!--
      Allow aliases for the /docs directory so that it can be
      symlinked into the webapp
    -->
    <init-param>
      <param-name>aliases</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>dirAllowed</param-name>
      <param-value>false</param-value> <!-- NMS-3475 -->
    </init-param>
    <init-param>
      <param-name>welcomeServlets</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <param-name>redirectWelcome</param-name>
      <param-value>false</param-value>
    </init-param>
    <init-param>
      <param-name>gzip</param-name>
      <param-value>true</param-value>
    </init-param>
    <init-param>
      <param-name>useFileMappedBuffer</param-name>
      <param-value>true</param-value>
    </init-param>
    <load-on-startup>0</load-on-startup>
  </servlet>

   <servlet-mapping>
     <servlet-name>docsDirectory</servlet-name>
     <url-pattern>/docs</url-pattern>
   </servlet-mapping>

  <!--  servlet that gwt rpc requests get mapped to -->
   <servlet>
     <servlet-name>gwtDispatcher</servlet-name>
     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
     <load-on-startup>1</load-on-startup>
   </servlet>

   <!-- Serves static resource content from .jar files such as spring-js.jar -->
   <servlet>
	<servlet-name>Resources Servlet</servlet-name>
	<servlet-class>org.springframework.js.resource.ResourceServlet</servlet-class>
	<load-on-startup>0</load-on-startup>
   </servlet>

   <!-- Map all /resources requests to the Resource Servlet for handling -->
   <servlet-mapping>
		<servlet-name>Resources Servlet</servlet-name>
		<url-pattern>/resources/*</url-pattern>
   </servlet-mapping>

  <!-- Servlet for modify Discovery configuration service -->
  <servlet>
    <servlet-name>actionDiscovery</servlet-name>
    <servlet-class>org.opennms.web.admin.discovery.ActionDiscoveryServlet</servlet-class>
  </servlet>
  <servlet>
    <servlet-name>discoveryScan</servlet-name>
    <servlet-class>org.opennms.web.admin.discovery.DiscoveryScanServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>importAssets</servlet-name>
    <servlet-class>org.opennms.web.asset.ImportAssetsServlet</servlet-class>
    <init-param>
      <description>Redirect to this sibling URL on success.</description>
      <param-name>redirect.success</param-name>
      <param-value>../../asset/nodelist.jsp?column=_allNonEmpty</param-value>
    </init-param>
  </servlet>
  <servlet>
    <servlet-name>exportAssets</servlet-name>
    <servlet-class>org.opennms.web.asset.ExportAssetsServlet</servlet-class>
  </servlet>
  <servlet>
    <servlet-name>modifyAsset</servlet-name>
    <servlet-class>org.opennms.web.asset.ModifyAssetServlet</servlet-class>
    <init-param>
      <description>Redirect to this sibling URL on success.</description>
      <param-name>redirect.success</param-name>
      <param-value>list</param-value>
    </init-param>
  </servlet>
  <servlet>
    <servlet-name>queryEvent</servlet-name>
    <servlet-class>org.opennms.web.event.EventQueryServlet</servlet-class>
    <init-param>
      <description>Redirect to this sibling URL after changing the parameter set.</description>
      <param-name>redirect.url</param-name>
      <param-value>list</param-value>
    </init-param>
  </servlet>
  <servlet>
    <servlet-name>queryAlarm</servlet-name>
    <servlet-class>org.opennms.web.alarm.AlarmQueryServlet</servlet-class>
    <init-param>
      <description>Redirect to this sibling URL after changing the parameter set.</description>
      <param-name>redirect.url</param-name>
      <param-value>list.htm</param-value>
    </init-param>
  </servlet>


  <!-- Servlet for updating the notification status -->
  <servlet>
    <servlet-name>updateNotificationStatus</servlet-name>
    <servlet-class>org.opennms.web.admin.notification.UpdateNotifdStatusServlet</servlet-class>
  </servlet>

  <!-- Servlet for building destination paths from a wizard -->
  <servlet>
    <servlet-name>destinationWizard</servlet-name>
    <servlet-class>org.opennms.web.admin.notification.DestinationWizardServlet</servlet-class>
  </servlet>

  <!-- Servlet for building notifications from a wizard -->
  <servlet>
    <servlet-name>notificationWizard</servlet-name>
    <servlet-class>org.opennms.web.admin.notification.noticeWizard.NotificationWizardServlet</servlet-class>
  </servlet>

  <!-- Servlets for configuration of users groups -->
  <servlet>
    <!-- servlet for passing parameters to the user modify jsp -->
    <servlet-name>modifyUser</servlet-name>
    <servlet-class>org.opennms.web.admin.users.ModifyUserServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for updating the local user info during modification-->
    <servlet-name>updateUser</servlet-name>
    <servlet-class>org.opennms.web.admin.users.UpdateUserServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for saving the local user info during modification-->
    <servlet-name>saveUser</servlet-name>
    <servlet-class>org.opennms.web.admin.users.SaveUserServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for renaming the local user info during modification-->
    <servlet-name>renameUser</servlet-name>
    <servlet-class>org.opennms.web.admin.users.RenameUserServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for adding a new user-->
    <servlet-name>addNewUser</servlet-name>
    <servlet-class>org.opennms.web.admin.users.AddNewUserServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for deleting a user-->
    <servlet-name>deleteUser</servlet-name>
    <servlet-class>org.opennms.web.admin.users.DeleteUserServlet</servlet-class>
  </servlet>

  <servlet>
    <!-- servlet for adding duty schedules to a user's notification info-->
    <servlet-name>addDutySchedules</servlet-name>
    <servlet-class>org.opennms.web.admin.users.AddDutySchedulesServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for removing duty schedules from a user's notification info-->
    <servlet-name>removeDutySchedules</servlet-name>
    <servlet-class>org.opennms.web.admin.users.RemoveDutySchedulesServlet</servlet-class>
  </servlet>

  <servlet>
  	<servlet-name>admin-roles</servlet-name>
  	<servlet-class>org.opennms.web.admin.roles.AdminRoleServlet</servlet-class>
  </servlet>

  <servlet>
  	<servlet-name>user-roles</servlet-name>
  	<servlet-class>org.opennms.web.admin.roles.UserRoleServlet</servlet-class>
  </servlet>

<!-- Servlets for user account self-service -->
  <!-- servlet for self-service password change entry point-->
  <servlet>
    <servlet-name>newPasswordEntry</servlet-name>
    <servlet-class>org.opennms.web.account.selfService.NewPasswordEntryServlet</servlet-class>
  </servlet>
   <!-- servlet for self-service password change action -->
  <servlet>
    <servlet-name>newPasswordAction</servlet-name>
    <servlet-class>org.opennms.web.account.selfService.NewPasswordActionServlet</servlet-class>
  </servlet>

  <!-- Servlet mappings for user account self-service -->
  <servlet-mapping>
    <servlet-name>newPasswordEntry</servlet-name>
    <url-pattern>/account/selfService/newPasswordEntry</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>newPasswordAction</servlet-name>
    <url-pattern>/account/selfService/newPasswordAction</url-pattern>
  </servlet-mapping>

  <servlet>
    <servlet-name>nodeLabelChange</servlet-name>
    <servlet-class>org.opennms.web.nodelabel.NodeLabelChangeServlet</servlet-class>
  </servlet>

  <servlet>
    <!-- servlet for setting critical path -->
    <servlet-name>setCriticalPath</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.SetCriticalPathServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for grabbing node information -->
    <servlet-name>deleteSelNodes</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.DeleteNodesServlet</servlet-class>
  </servlet>
  <servlet>
     <servlet-name>deleteInterface</servlet-name>
     <servlet-class>org.opennms.web.admin.nodeManagement.DeleteInterfaceServlet</servlet-class>
  </servlet>
  <servlet>
     <servlet-name>deleteService</servlet-name>
     <servlet-class>org.opennms.web.admin.nodeManagement.DeleteServiceServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for grabbing interfaces and services on a node -->
    <servlet-name>getInterfaces</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.GetInterfacesServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for adding a new interface -->
    <servlet-name>addNewInterface</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.AddNewInterfaceServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for deleting nodes -->
    <servlet-name>deleteNodes</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.DeleteGetNodesServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for grabbing SNMP node information -->
    <servlet-name>snmpGetNodes</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.SnmpGetNodesServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for grabbing SNMP interface information -->
    <servlet-name>snmpGetInterfaces</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.SnmpGetInterfacesServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for grabbing node, interface and service information -->
    <servlet-name>getNodes</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.GetNodesServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for managing and unmanaging interfaces and services -->
    <servlet-name>manageNodes</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.ManageNodesServlet</servlet-class>
  </servlet>
  <servlet>
     <!-- servlet for managing/unmanaging interfaces and services for a single node -->
     <servlet-name>manageNode</servlet-name>
     <servlet-class>org.opennms.web.admin.nodeManagement.ManageNodeServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for managing and unmanaging interfaces and services -->
    <servlet-name>snmpManageNodes</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.SnmpManageNodesServlet</servlet-class>
  </servlet>
  <servlet>
    <!-- servlet for configuring SNMP parameters -->
    <servlet-name>snmpConfig</servlet-name>
    <servlet-class>org.opennms.web.admin.nodeManagement.SnmpConfigServlet</servlet-class>
  </servlet>

  <!--servlet for updating the notify flag in the ifservices table -->
  <servlet>
        <servlet-name>updateServiceNotify</servlet-name>
        <servlet-class>org.opennms.web.admin.notification.ServiceNoticeUpdateServlet</servlet-class>
  </servlet>

  <servlet>
    <servlet-name>rtcPost</servlet-name>
    <servlet-class>org.opennms.web.category.RTCPostServlet</servlet-class>
    <!-- Load on startup so that we can immediately start processing RTC POSTs -->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet>
    <servlet-name>rtcRaw</servlet-name>
    <servlet-class>org.opennms.web.category.RTCDebugServlet</servlet-class>
    <!-- Load on startup so that we can immediately start processing RTC POSTs -->
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet>
    <servlet-name>sendMail</servlet-name>
    <servlet-class>org.opennms.web.mail.MailerServlet</servlet-class>
    <init-param>
      <description>Redirect to this sibling URL on success.</description>
      <param-name>redirect.success</param-name>
      <param-value>../support/index.htm</param-value>
    </init-param>
    <init-param>
      <description>Redirect to this sibling URL on success.</description>
      <param-name>mail.program</param-name>
      <param-value>/bin/mail</param-value>
    </init-param>
  </servlet>

  <servlet>
    <servlet-name>nodeRescan</servlet-name>
    <servlet-class>org.opennms.web.element.NodeRescanServlet</servlet-class>
  </servlet>

  <!-- Servlet to set snmp interface up or down -->
  <servlet>
     <servlet-name>ManageSnmpIntf</servlet-name>
    <servlet-class>org.opennms.web.element.ManageSnmpIntfServlet</servlet-class>
  </servlet>

  <!--
  <servlet>
    <servlet-name>filterOutage</servlet-name>
    <servlet-class>org.opennms.web.outage.OutageFilterServlet</servlet-class>
  </servlet>
  -->

  <!-- servlet>
    <servlet-name>invClogin</servlet-name>
    <servlet-class>org.opennms.web.inventory.InvCloginServlet</servlet-class>
  </servlet-->

  <servlet>
  	<servlet-name>purdyChart</servlet-name>
  	<servlet-class>org.opennms.web.graph.PurdyChartServlet</servlet-class>
  	<init-param>
  		<param-name>chart-name</param-name>
  		<param-value>sample-bar-chart</param-value>
  	</init-param>
  </servlet>

  <servlet>
        <servlet-name>dispatcher</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <load-on-startup>1</load-on-startup>
  </servlet>

  <!-- desktop graph servlet mapping -->
  <!-- desktop survey report servlet mapping -->

  <servlet-mapping>
  	<servlet-name>purdyChart</servlet-name>
  	<url-pattern>/charts</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>queryEvent</servlet-name>
    <url-pattern>/event/query</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>queryAlarm</servlet-name>
    <url-pattern>/alarm/query</url-pattern>
  </servlet-mapping>

  <!--servlet mapping for update notification status servlet -->
  <servlet-mapping>
    <servlet-name>updateNotificationStatus</servlet-name>
    <url-pattern>/admin/updateNotificationStatus</url-pattern>
  </servlet-mapping>

  <!-- servlet mapping for the destination wizard servlet -->
  <servlet-mapping>
    <servlet-name>destinationWizard</servlet-name>
    <url-pattern>/admin/notification/destinationWizard</url-pattern>
  </servlet-mapping>

  <!-- servlet mapping for the notification wizard servlet -->
  <servlet-mapping>
    <servlet-name>notificationWizard</servlet-name>
    <url-pattern>/admin/notification/noticeWizard/notificationWizard</url-pattern>
  </servlet-mapping>

  <!-- servlet mapping for configuring users groups -->
  <!-- user configuration servlets -->
  <!-- converted to Controller -->
  <servlet-mapping>
    <servlet-name>modifyUser</servlet-name>
    <url-pattern>/admin/userGroupView/users/modifyUser</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>updateUser</servlet-name>
    <url-pattern>/admin/userGroupView/users/updateUser</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>saveUser</servlet-name>
    <url-pattern>/admin/userGroupView/users/saveUser</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>renameUser</servlet-name>
    <url-pattern>/admin/userGroupView/users/renameUser</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>addNewUser</servlet-name>
    <url-pattern>/admin/userGroupView/users/addNewUser</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>deleteUser</servlet-name>
    <url-pattern>/admin/userGroupView/users/deleteUser</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>addDutySchedules</servlet-name>
    <url-pattern>/admin/userGroupView/users/addDutySchedules</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>removeDutySchedules</servlet-name>
    <url-pattern>/admin/userGroupView/users/removeDutySchedules</url-pattern>
  </servlet-mapping>
  <!-- end of user configuration servlets -->

  <!-- group configuration servlets -->
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/admin/userGroupView/groups/modifyGroup</url-pattern>
  </servlet-mapping>
  <!-- end of group configuration servlets -->
  <!-- set UserGroup for user dynamically -->
  <servlet-mapping>
      <servlet-name>dispatcher</servlet-name>
      <url-pattern>/support/groups/setACLUserGroups</url-pattern>
  </servlet-mapping>
  <!-- end -->

  <servlet-mapping>
    <servlet-name>admin-roles</servlet-name>
    <url-pattern>/admin/userGroupView/roles</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>user-roles</servlet-name>
    <url-pattern>/roles</url-pattern>
  </servlet-mapping>

  <!-- end of user groups configuration servlets -->

  <servlet-mapping>
    <servlet-name>nodeLabelChange</servlet-name>
    <url-pattern>/admin/nodeLabelChange</url-pattern>
  </servlet-mapping>

    <!--servlet mapping for restart discovery servlet-->
  <servlet-mapping>
    <servlet-name>actionDiscovery</servlet-name>
    <url-pattern>/admin/discovery/actionDiscovery</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>discoveryScan</servlet-name>
    <url-pattern>/admin/discovery/scanConfig</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>modifyAsset</servlet-name>
    <url-pattern>/asset/modifyAsset</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>importAssets</servlet-name>
    <url-pattern>/admin/asset/import/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>exportAssets</servlet-name>
    <url-pattern>/admin/asset/assets.csv</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>getInterfaces</servlet-name>
    <url-pattern>/admin/nodemanagement/getInterfaces</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>addNewInterface</servlet-name>
    <url-pattern>/admin/addNewInterface</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>setCriticalPath</servlet-name>
    <url-pattern>/admin/setCriticalPath</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>deleteSelNodes</servlet-name>
    <url-pattern>/admin/deleteSelNodes</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>deleteNodes</servlet-name>
    <url-pattern>/admin/deleteNodes</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
     <servlet-name>deleteInterface</servlet-name>
     <url-pattern>/admin/deleteInterface</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
  	<servlet-name>deleteService</servlet-name>
  	<url-pattern>/admin/deleteService</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>snmpGetNodes</servlet-name>
    <url-pattern>/admin/snmpGetNodes</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>snmpGetInterfaces</servlet-name>
    <url-pattern>/admin/snmpGetInterfaces</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>getNodes</servlet-name>
    <url-pattern>/admin/getNodes</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>manageNodes</servlet-name>
    <url-pattern>/admin/manageNodes</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
     <servlet-name>manageNode</servlet-name>
     <url-pattern>/admin/manageNode</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>snmpManageNodes</servlet-name>
    <url-pattern>/admin/changeCollectStatus</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>snmpConfig</servlet-name>
    <url-pattern>/admin/snmpConfig</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
        <servlet-name>updateServiceNotify</servlet-name>
        <url-pattern>/admin/updateServiceNotify</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>rtcPost</servlet-name>
    <url-pattern>/rtc/post/*</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>rtcRaw</servlet-name>
    <url-pattern>/rtc/raw</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>sendMail</servlet-name>
    <url-pattern>/mail/send</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>nodeRescan</servlet-name>
    <url-pattern>/element/rescan</url-pattern>
  </servlet-mapping>

   <servlet-mapping>
    <servlet-name>ManageSnmpIntf</servlet-name>
    <url-pattern>/element/ManageSnmpIntf</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
    <servlet-name>gwtDispatcher</servlet-name>
    <url-pattern>*.gwt</url-pattern>
  </servlet-mapping>

    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>*.htm</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/alarm/index</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/alarm/list</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/alarm/createFavorite</url-pattern>
    </servlet-mapping>
    <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/alarm/deleteFavorite</url-pattern>
    </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/alarm/acknowledge</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/alarm/acknowledgeByFilter</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/alarm/changeSeverity</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/event/acknowledge</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/event/acknowledgeByFilter</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/event/index</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/event/createFavorite</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/event/deleteFavorite</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/event/list</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/event/detail.jsp</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/notification/browse</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/notification/acknowledge</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/outage/list</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/outage/detail.jsp</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>dispatcher</servlet-name>
    <url-pattern>/element/service.jsp</url-pattern>
  </servlet-mapping>

  <!-- Although this will be matched by the above *.htm url-pattern,
       this servlet-mapping needs to be here because wildcard url-pattern
       elements don't seem to work as a welcome-page entry. -->
  <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/frontPage.htm</url-pattern>
  </servlet-mapping>

  <servlet-mapping>
        <servlet-name>dispatcher</servlet-name>
        <url-pattern>/graph/graph.png</url-pattern>
  </servlet-mapping>

  <!-- WARMERGE: insert servlet -->
  <!-- WARMERGE: insert servlet-mapping -->

  <error-page>
    <exception-type>org.opennms.web.category.CategoryNotFoundException</exception-type>
    <location>/errors/categorynotfound.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.web.servlet.MissingParameterException</exception-type>
    <location>/errors/missingparam.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.web.event.EventIdNotFoundException</exception-type>
    <location>/errors/eventidnotfound.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.web.alarm.AlarmIdNotFoundException</exception-type>
    <location>/errors/alarmidnotfound.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.web.element.ElementNotFoundException</exception-type>
    <location>/errors/elementnotfound.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.web.element.ElementIdNotFoundException</exception-type>
    <location>/errors/elementidnotfound.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.web.notification.NoticeIdNotFoundException</exception-type>
    <location>/errors/noticeidnotfound.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.web.outage.OutageIdNotFoundException</exception-type>
    <location>/errors/outageidnotfound.jsp</location>
  </error-page>
  <error-page>
    <exception-type>java.lang.SecurityException</exception-type>
    <location>/errors/sealingviolation.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.web.controller.statisticsReports.StatisticsReportIdNotFoundException</exception-type>
    <location>/errors/statisticsreportidnotfound.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.netmgt.events.api.EventProxyException</exception-type>
    <location>/errors/eventproxyexception.jsp</location>
  </error-page>
  <error-page>
    <exception-type>org.opennms.web.admin.nodeManagement.NoManagedInterfacesException</exception-type>
    <location>/errors/nomanagedinterfaces.jsp</location>
  </error-page>
  <error-page>
    <exception-type>java.lang.Throwable</exception-type>
    <location>/errors/unknownexception.jsp</location>
  </error-page>
  <error-page>
    <error-code>500</error-code>
    <location>/errors/unknownexception.jsp</location>
  </error-page>
  <error-page>
    <error-code>404</error-code>
    <location>/errors/pagenotfound.jsp</location>
  </error-page>

  <!-- the welcome-file elements need to point at a file that exists or
       a non-wildcard url-pattern in a servlet-mapping element. -->
  <welcome-file-list>
    <welcome-file>frontPage.jsp</welcome-file>
  </welcome-file-list>

</web-app>

