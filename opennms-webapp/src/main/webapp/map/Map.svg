<?xml version="1.0" encoding="iso-8859-1" standalone='no'?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 20001102//EN"
"http://www.w3.org/TR/2000/CR-SVG-20001102/DTD/svg-20001102.dtd">
<svg id="mainSvgDocument"  onload="load(evt);" xmlns:xlink="http://www.w3.org/1999/xlink" width="100%" height="100%" xmlns="http://www.w3.org/2000/svg">
	<defs>
		<menu id='ContextMenu' xmlns='http://mapsContextMenu.openNMS.org' />
	</defs>
	<script type="text/ecmascript" xlink:href="js/helpers.js"/>

	<script type="text/ecmascript" xlink:href="ECMAScript/helper_functions.js"/>
	<script type="text/ecmascript" xlink:href="ECMAScript/mapApp.js"/>
	<script type="text/ecmascript" xlink:href="ECMAScript/timer.js"/>
	<script type="text/ecmascript" xlink:href="ECMAScript/textbox.js"/>
	<script type="text/ecmascript" xlink:href="ECMAScript/button.js"/>
	<script type="text/ecmascript" xlink:href="ECMAScript/selectionList.js"/>
	<script type="text/ecmascript" xlink:href="ECMAScript/Window.js"/>
	<script type="text/ecmascript" xlink:href="ECMAScript/Point2D.js"/>
	<script type="text/ecmascript" xlink:href="ECMAScript/PickColor.js"/>	

	<script type="text/ecmascript" xlink:href="svgjavascript/Menu.js"/>	
	<script type="text/ecmascript" xlink:href="svgjavascript/MoveableSVGElement.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/ApplicationConstants.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/ApplicationVariables.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/ApplicationHelpers.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/ApplicationEventProcessor.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/Map.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/MapTabs.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/Node.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/Label.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/Link.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/SLink.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/Icon.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/MapElement.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/Semaphore.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/ElemMap.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/ApplicationMap.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/ApplicationMenu.js"/>
	<script type="text/ecmascript" xlink:href="svgjavascript/ContextMenu.js"/>	
	
	
<script type="text/ecmascript"><![CDATA[

var startingup=true;
var useMenu = false;
var updateUrl = true;
var iglobal=0;

top.resizeSVG = resizeSVG;

function resizeSVG() {
	if (savedMapString!=getMapString() && currentMapId!=MAP_NOT_OPENED && currentMapId != NEW_MAP && isAdminMode) {
		clearTopInfo();
		disableMenu();
		writeDownInfo("Saving map '" +currentMapName+"'");
		resetFlags();
		saveMap();
		top.resize(3000);
	} else if (currentMapId == NEW_MAP ) {
		setTimeout("manageNewMapNotSavedOnResizing();",600);
	} else {
		top.resize(1000);
	}
}

function manageNewMapNotSavedOnResizing() {
	var r=confirm("Resizing.... Do you want to save NewMap work?");
	if (r==true) {
		var name=prompt("Enter Map Name","TemporaryMap");
		if (name!=null && name!="") {
			renameMapWithName(name);
			setTimeout("saveMap();",500);
			top.resize(3500);
		}
	} else {
		top.resize(1000);
	}

}

function historyCallBack(mapId) {
	if (startingup) {
		if(mapId) {
			setTimeout('openBookMarkedMap('+mapId+');',1000);
		} else {
			setTimeout('loadDefaultMap();',1000);		
		}
		startingup=false;
		return;
	}
	
	if (useMenu) {
		useMenu=false;
		return
	}
	
	if(mapId) {
		openBookMarkedMap(mapId)
	} else {
		close();
	}
	
}

function openBookMarkedMap(mapId) {
	windowsClean();
	clearTopInfo();
	clearDownInfo();
	useMenu=false;
	updateUrl=false;
	mapTabSetUp(mapidSortAss[mapId]);	
	openMap(mapId,true);
}

function startUp() {
	// Instantiate the default map
	map = new Map("#"+DEFAULT_BG_COLOR,"Background", mapWidth, mapHeight, 0, 0, maxLinks,summaryLinkId,summaryLinkColor,LINK_WIDTH[summaryLinkId],LINK_DASHARRAY[summaryLinkId],multilinkStatus,multilinkIgnoreColor);
	
	mapSvgElement.appendChild(map.getSvgNode());

	// Instantiate the tabPanel
	mapTabTitles.push(MAP_NOT_OPENED_NAME);
	mapTabGroup = new MapTabs("TabPanelGroup","TabPanel",mapWidth,tabwidth,menuHeight,tabStyles,tabactivetabBGColor,tabtextStyles,mapTabTitles,0);
	defaultMap = new ElemMap(-2, null, null);
	
	
	// Instantiate the menus
	mapMenu = 
new Menu(menuSvgElement,mapMenuId,"Map",mapMenuX,mapMenuY,menuWidth,menuHeight,menuStyle,menuTextStyle,menuMouseStyle,menuUpColor,menuDownColor,resetWorkPanel); 	
	
	nodeMenu = 
new Menu(menuSvgElement,nodeMenuId,"Node",nodeMenuX,nodeMenuY,menuWidth,menuHeight, menuStyle,menuTextStyle,menuMouseStyle,menuUpColor,menuDownColor,resetWorkPanel);
	
	viewMenu = 
new Menu(menuSvgElement,viewMenuId,"View",viewMenuX,viewMenuY,menuWidth,menuHeight, menuStyle,menuTextStyle,menuMouseStyle,menuUpColor,menuDownColor,resetWorkPanel);

	refreshMenu = 
new Menu(menuSvgElement,refreshMenuId,"Reload",refreshMenuX,refreshMenuY,menuWidth,menuHeight, menuStyle,menuTextStyle,menuMouseStyle,menuUpColor,menuDownColor,resetWorkPanel);
	
	loadMaps();
	loadNodes();
		
	addLegend();

	enableMenu();
 	
	displayCountDown("Set Refresh Time",true);
	
	myMapApp.initTooltips("toolTip",tooltipTextStyles,tooltipRectStyles,10,5,3);

	top.$j(document).ready(function() {
		top.$j.history.init(historyCallBack);

	});
}

function handleInit(data) {
	if(data.success || data.status==200) {
		var mapsPropertiesFactory=eval("("+data.content+")");
		isUserAdmin=mapsPropertiesFactory.userAdmin;
		reloadMap = mapsPropertiesFactory.reload;
		contextMenuEnabled = mapsPropertiesFactory.contextMenuEnabled;
		doubleClickEnabled = mapsPropertiesFactory.doubleClickEnabled;
		UNKNOWN_STATUS = mapsPropertiesFactory.unknownstatusid;
		mapElemDimension = mapsPropertiesFactory.defaultMapElementDimension;
		maxLinks = mapsPropertiesFactory.maxLinks;
		summaryLinkId = mapsPropertiesFactory.summaryLink;
		summaryLinkColor = mapsPropertiesFactory.summaryLinkColor;
		useSemaphore=mapsPropertiesFactory.useSemaphore;
		if (mapsPropertiesFactory.multilinkStatus == "ignore" )
			multilinkStatus=true;
		multilinkIgnoreColor=mapsPropertiesFactory.multilinkIgnoreColor;
		
		DEFAULT_ICON = mapsPropertiesFactory.defaultNodeIcon;
		DEFAULT_MAP_ICON = mapsPropertiesFactory.defaultMapIcon;
		DEFAULT_BG_COLOR = mapsPropertiesFactory.defaultBackgroundColor;
		
		currentMapBackGround = DEFAULT_BG_COLOR;
		
		currentMapId = MAP_NOT_OPENED;
		

		var i=0;
		
		for (i=0;i<mapsPropertiesFactory.contextMenu.entries.length;i++) 
		{
			CM_COMMANDS[i]=mapsPropertiesFactory.contextMenu.entries[i].command;
			CM_LINKS[i]=mapsPropertiesFactory.contextMenu.entries[i].link;
			CM_PARAMS[i]=mapsPropertiesFactory.contextMenu.entries[i].params;    				    		     
		}
		
	    cmheight = cmdelta * CM_COMMANDS.length;
		
		for (i=0;i<mapsPropertiesFactory.links.length;i++)
		{	
			var currLink = mapsPropertiesFactory.links[i];
			LINK_SPEED[currLink.id]=currLink.speed;
			LINK_TEXT[currLink.id]=currLink.text;
			LINK_WIDTH[currLink.id]=currLink.width;
			LINK_DASHARRAY[currLink.id]=currLink.dasharray;
			MULTILINK_WIDTH[currLink.id]=currLink.multilinkwidth;
			MULTILINK_DASHARRAY[currLink.id]=currLink.multilinkdasharray;
		}
              
        for (i=0;i<mapsPropertiesFactory.linkStatuses.length;i++)
        {
            var currLinkStatus = mapsPropertiesFactory.linkStatuses[i];
            LINKSTATUS_COLOR[currLinkStatus.id]=currLinkStatus.color;
            LINKSTATUS_FLASH[currLinkStatus.id]=currLinkStatus.flash;
        }

        for (i=0;i<mapsPropertiesFactory.statuses.length;i++)
        {
            var status = mapsPropertiesFactory.statuses[i];
   			STATUSES_TEXT[status.id]=status.text;
			STATUSES_COLOR[status.id]=status.color;
        	STATUSES_UEI[status.id]=status.uei;
        }

        for (i=0;i<mapsPropertiesFactory.severities.length;i++)
        {
            var severity = mapsPropertiesFactory.severities[i];
        	SEVERITIES_LABEL[severity.id]=severity.label;
    	 	SEVERITIES_COLOR[severity.id]=severity.color;
			SEVERITIES_FLASH[severity.id]=severity.flash;
        }

        for (i=0;i<mapsPropertiesFactory.avails.length;i++)
        {
            var avail = mapsPropertiesFactory.avails[i];
            AVAIL_MIN[avail.id]=avail.min;
            AVAIL_COLOR[avail.id]=avail.color;
            AVAIL_FLASH[avail.id]=avail.flash;
		}
	
		for(var icon in mapsPropertiesFactory.icons)
		{
            MEIcons.push(icon);
		    MEIconsSorts.push(IMAGES_ELEMENTS_FOLDER+mapsPropertiesFactory.icons[icon]);
        }
              
		for (var image in mapsPropertiesFactory.backgroundImages)
        {
            BGImages.push(image);
            BGImagesSorts.push(IMAGES_BACKGROUND_FOLDER+mapsPropertiesFactory.backgroundImages[image]);                            
		}

        for (var dim in mapsPropertiesFactory.mapElementDimensions)
        {
			MapElemDim.push(dim+" pixel width");
			MapElemDimSorts.push(dim);                                	
		}

        for(var index in mapsPropertiesFactory.categories)
        {
			categories.push(escapeSpecialChars(mapsPropertiesFactory.categories[index]));
			categorySorts.push(escapeSpecialChars(mapsPropertiesFactory.categories[index]));
        }
        
        refreshTimeMins.push("30 seconds");
		refreshTimeMinsSorts.push(30);
		refreshTimeMins.push("1 minute");
		refreshTimeMinsSorts.push(60);
		refreshTimeMins.push("2 minutes");
		refreshTimeMinsSorts.push(120);
		refreshTimeMins.push("5 minutes");
		refreshTimeMinsSorts.push(300);
		refreshTimeMins.push("10 minutes");
		refreshTimeMinsSorts.push(600);
		refreshTimeMins.push("20 minutes");
		refreshTimeMinsSorts.push(1200);
		
		refreshTimeMinsSortAss = assArrayPopulate(refreshTimeMins,refreshTimeMinsSorts);        
   		categorySortAss = assArrayPopulate(categories,categorySorts);
    	BGImagesSortAss = assArrayPopulate(BGImages,BGImagesSorts);		
    	MapElemDimSortAss = assArrayPopulate(MapElemDim,MapElemDimSorts);	
    	MEIconsSortAss = assArrayPopulate(MEIcons,MEIconsSorts);

		mynodesResult = new nodesResult();
	    mymapsResult = new mapsResult();
	    mycategoriesResult = new categoriesResult();

	    myBGImagesResult = new BGImagesResult();
	    myMapElemDimResult = new MapElemDimResult();
	    myMEIconsResult = new MEIconsResult();
		myRefreshTimeMinsResult = new refreshTimeMinsResult();
	
		startUp();					
	}else{
		alert("Initialization failed.");
	}	
}	

function load(evt){
	
	// Reference var to the Menu SVG Object	
	menuSvgElement = document.getElementById("Menu");
	
	// Reference var to the MapPanel SVG Object		
	mapSvgElement = document.getElementById("MapPanel");

	// Reference var to the Windows SVG Object		
	winSvgElement = document.getElementById("Windows");

	// Reference var to the Windows SVG Object		
	tabSvgElement = document.getElementById("TabPanel");

	mapWidth=top.svgMapWidth-workPanelWidth-workPanelDelta;
	mapHeight=top.svgMapHeight;				
	
	// Define the position and dimension of the work panel objects
	document.getElementById('WorkPanel').setAttributeNS(null,"x",mapWidth+workPanelDelta);
	document.getElementById('WorkPanel').setAttributeNS(null,"width",workPanelWidth);
	document.getElementById('WorkPanel').setAttributeNS(null,"height",workPanelHeight);

	document.getElementById('toolbar').setAttributeNS(null,"fill","navy");
	document.getElementById('toolbar').setAttributeNS(null,"height",2*menuHeight+1);


	document.getElementById('countDownText').setAttributeNS(null,"fill","white");
	document.getElementById('countDownText').setAttributeNS(null,"font-family",textFamily);
	document.getElementById('countDownText').setAttributeNS(null, "font-size",titleFontSize);
	
	
	document.getElementById('MapInfo').setAttributeNS(null,"display","none");
	document.getElementById('MapInfo').setAttributeNS(null,"font-family",textFamily);
	document.getElementById('MapInfo').setAttributeNS(null, "font-size",textFontSize);
	
	document.getElementById('prevMapName').setAttributeNS(null,"font-family",textFamily);
	document.getElementById('prevMapName').setAttributeNS(null, "font-size",textFontSize);

	document.getElementById('nextMapName').setAttributeNS(null,"font-family",textFamily);
	document.getElementById('nextMapName').setAttributeNS(null, "font-size",textFontSize);

	document.getElementById('TopInfoText').setAttributeNS(null,"display","none");
	document.getElementById('TopInfoText').setAttributeNS(null,"font-family",textFamily);
	document.getElementById('TopInfoText').setAttributeNS(null, "font-size",titleFontSize);

        if(iglobal==0) {
	   postMapRequestAll( "MapStartUp."+suffix, "GET", null, handleInit, "text/xml", null, true );
        }
        iglobal++;
}

]]></script>

	<!-- ******** TAB P A N E L ********* -->	

	<svg id="TabPanel"/>



	<!-- ******** MAP P A N E L ********* -->	

	<svg id="MapPanel" x="0" y="20"/>

	<!-- ******** WINDOWS P A N E L S ********* -->	
	<svg id="Windows" x="0" y="20"/>
	
	<!-- ******** TOOLTIP P A N E L S ********* -->	
	<g id="toolTip"/>
	
	<!-- ******** WORK P A N E L ********* -->	
	<svg id="WorkPanel" y="0">

		<!-- ********* TOOLBAR M E N U ********* -->

		<rect id="toolbar" x="0" y="0" width="100%"/>
		<text id="countDownText"  x="3" y="3" />
		<svg id="Menu"/>


		<!-- ********* MAP I N F O ********* -->
		<text id="MapInfo" x="3" y="50"/>	
	
		<!-- ********* maps history ********* -->
		<svg id="history" y="170" x="3" width="150" heigth="30">
		    <g id="topGroup" display="none">
				<polygon id="prev" points="0,23 6,23 3,18" style="stroke:grey;fill:blue"/>
				<polygon id="prev" points="6,23 12,23 9,18" style="stroke:grey;fill:blue"/>
				<text id="topMapName" x="13" y="23" fill="navy" font-size="10">Up</text>
				<rect  style="cursor:pointer" id="topAction"  x="0" y="15" rx="2" ry="2" width="14" height="10" opacity="0"/>
		    </g>
		
		    <g id="prevGroup" display="none">
				<polygon id="prev" points="0,30 5,27 5,33" style="stroke:grey;fill:blue"/>
				<polygon id="prev" points="6,30 11,27 11,33" style="stroke:grey;fill:blue"/>
				<text id="prevMapName" x='13' y='33' style='fill:navy'></text>
				<rect  style="cursor:pointer" id="prevAction"  x="0" y="25" rx="2" ry="2" width="14" height="10" opacity="0"/>
		    </g>
		    
		    <g id="nextGroup" display="none">
				<polygon id="next" points="0,37 0,43 5,40" style="stroke:grey;fill:blue"/>
				<polygon id="next" points="6,37 6,43 11,40" style="stroke:grey;fill:blue"/>
				<text id="nextMapName" x='13' y='43' style='fill:navy'></text>
				<rect  style="cursor:pointer" id="nextAction"  x="0" y="35" rx="2" ry="2" width="14" height="10" opacity="0"/>
		    </g>	    	    
		</svg>	
		
		<!-- ********* TOP I N F O ********* -->
    	<svg  y="220" width="100%" height="250" id="TopInfo">
			<g id="TopInfoText" x="5" y="5"/>
			<g id="nodes" />
			<g id="categories" />
			<g id="maps" />
			<g id="bgimages" />
			<g id="mapelemdim" />
			<g id="meicons" />
			<g id="refreshTime" />
			<g id="textboxwithcommand" />
		</svg>

		<!-- ********* DOWN I N F O ********* -->

		<svg  y="350" id="DownInfo">
			<text id="DownInfoText" x="5" y="30" />
		</svg>	

		<!-- ********* L E G E N D ********* -->
		<svg id="legend" y="75%"  width="130" height="130"/>

		<svg>
			<g id="LoadingText" x="40%" y="50%" display="none">
			<rect  x="40%" y="40%" fill="white" stroke="white" width="60" height="20"  />
			<text  x="40%" y="40%"><tspan font-size='12'   dx="3" dy="13" font-family="Arial,Helvetica">Loading...</tspan></text>
			</g>
		</svg>

		<svg>
			<g id="RefreshingText" x="40%" y="50%"  display="none">
				<rect  x="40%" y="40%" fill="white" stroke="white" width="75" height="20"  />
				<text  x="40%" y="40%"><tspan  font-size='12' dx="3" dy="13" font-family="Arial,Helvetica">Refreshing...</tspan></text>
			</g>
		</svg>	

<!-- svg for changing the background color of the map -->

		<svg  id="pickColor" y="230" x="20" display="none">
			<g onkeypress="pick_color_tape(evt)" >
				<g onmouseup="pick_lacher(evt)" onmousemove="pick_bouger(evt)" onmousedown="pick_choisir(evt)">
		
					<rect id="test" x="15" y="20" width="120" height="30" style="fill:#808080"/>
					<rect x="10" y="70" width="130" height="7" style="fill:red; stroke:gray"/>
					<rect x="10" y="100" width="130" height="7" style="fill:green; stroke:gray"/>
					<rect x="10" y="130" width="130" height="7" style="fill:blue; stroke:gray"/>
					<g  style="stroke:#131516;stroke-width:1;stroke-linejoin:round">
						<rect id="rouge" x="75" y="65" width="3" height="16" style="fill:gray"/>
						<rect id="vert" x="75" y="95" width="3" height="16" style="fill:gray"/>
						<rect id="bleu" x="75" y="125" width="3" height="16" style="fill:gray"/>
					</g>
				</g>
				<rect x="15" y="145" width="50" height="20" style="fill:blue;stroke:pink;stroke-width:1;fill-opacity:0.5;stroke-opacity:0.9"/>
				<text x="28" y="160" style="font-size:10pt;fill:white">OK</text>
				<rect onclick="close_pick_color(true)" x="15" y="145" width="50" height="20" style="fill:green;fill-opacity:0"/>
				<rect x="85" y="145" width="50" height="20" style="fill:blue;stroke:pink;stroke-width:1;fill-opacity:0.5;stroke-opacity:0.9"/>
				<text x="90" y="160" style="font-size:10pt;fill:white">Cancel</text>
				<rect onclick="close_pick_color(false)" x="85" y="145" width="50" height="20" style="fill:green;fill-opacity:0"/>
			</g>
		</svg>


 	</svg> <!-- End WorkPanel -->
	
</svg>


