<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
xsi:schemaLocation="http://www.osgi.org/xmlns/blueprint/v1.0.0 
					http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
					http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0 
					http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd
					http://www.osgi.org/xmlns/blueprint-ext/v1.1.0 
					http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.1.xsd">
    <cm:property-placeholder id="linkdConfig" persistent-id="org.opennms.features.topology.plugins.topo.linkd" update-strategy="reload">
        <cm:default-properties>
            <cm:property name="configurationFile" value="/opt/opennms/etc/saved-linkd-graph.xml"/>
        </cm:default-properties>
    </cm:property-placeholder>

    <reference id="transactionOperations" interface="org.springframework.transaction.support.TransactionOperations" availability="mandatory" />

    <reference id="lldpLinkDao" interface="org.opennms.netmgt.dao.api.LldpLinkDao" availability="mandatory" />
    <reference id="lldpElementDao" interface="org.opennms.netmgt.dao.api.LldpElementDao" availability="mandatory" />
    <reference id="ospfLinkDao" interface="org.opennms.netmgt.dao.api.OspfLinkDao" availability="mandatory" />
    <reference id="isisLinkDao" interface="org.opennms.netmgt.dao.api.IsIsLinkDao" availability="mandatory" />
    <reference id="ospfElementDao" interface="org.opennms.netmgt.dao.api.OspfElementDao" availability="mandatory" />
    <reference id="nodeDao" interface="org.opennms.netmgt.dao.api.NodeDao" availability="mandatory" />
    <reference id="ipInterfaceDao" interface="org.opennms.netmgt.dao.api.IpInterfaceDao" availability="mandatory" />
    <reference id="snmpInterfaceDao" interface="org.opennms.netmgt.dao.api.SnmpInterfaceDao" availability="mandatory" />
    <reference id="alarmDao" interface="org.opennms.netmgt.dao.api.AlarmDao" availability="mandatory" />
    <reference id="topologyDao" interface="org.opennms.netmgt.dao.api.TopologyDao" availability="mandatory" />
    <reference id="filterManager" interface="org.opennms.netmgt.model.FilterManager" availability="mandatory" />
    <reference id="bridgeBridgeLinkDao" interface="org.opennms.netmgt.dao.api.BridgeBridgeLinkDao" availability="mandatory"/>
    <reference id="bridgeMacLinkDao" interface="org.opennms.netmgt.dao.api.BridgeMacLinkDao" availability="mandatory" />
    <reference id="bridgeTopologyDao" interface="org.opennms.netmgt.dao.api.BridgeTopologyDao" availability="mandatory" />
    <reference id="cdpLinkDao" interface="org.opennms.netmgt.dao.api.CdpLinkDao" availability="mandatory"/>
    <reference id="cdpElementDao" interface="org.opennms.netmgt.dao.api.CdpElementDao" availability="mandatory"/>
    <reference id="ipNetToMediaDao" interface="org.opennms.netmgt.dao.api.IpNetToMediaDao" availability="mandatory"/>

    <bean id="enlinkdTopologyProviderInfo" class="org.opennms.features.topology.api.topo.DefaultTopologyProviderInfo">
        <property name="name" value="Enhanced Linkd Topology Provider"/>
        <property name="description" value="This Topology Provider displays the topology information discovered by the Enhanced Linkd daemon. It uses the SNMP information of several protocols like OSPF, ISIS, LLDP and CDP to generate an overall topology."/>
    </bean>

    <!-- Metrics -->
    <bean id="metricRegistry" class="com.codahale.metrics.MetricRegistry" />

    <bean id="metricRegistryJmxReporterBuilder" class="com.codahale.metrics.JmxReporter" factory-method="forRegistry">
        <argument ref="metricRegistry"/>
    </bean>

    <bean id="metricRegistryDomainedJmxReporterBuilder" factory-ref="metricRegistryJmxReporterBuilder" factory-method="inDomain">
        <argument value="org.opennms.features.topology.plugins.topo.linkd" />
    </bean>

    <bean id="metricRegistryJmxReporter"
        factory-ref="metricRegistryDomainedJmxReporterBuilder"
        factory-method="build"
        init-method="start"
        destroy-method="stop" />

    <!--Topology Provider Shared Components-->
    <bean id="linkdHopCriteriaFactory" class="org.opennms.features.topology.plugins.topo.linkd.internal.LinkdHopCriteriaFactory">
        <argument ref="nodeDao"/>
    </bean>
    <!-- Shared Components end -->

    <bean id="topologyProvider" scope="singleton" class="org.opennms.features.topology.plugins.topo.linkd.internal.EnhancedLinkdTopologyProvider">
        <argument ref="metricRegistry" />
        <property name="configurationFile" value="${configurationFile}"/>
        <property name="transactionOperations" ref="transactionOperations"/>
        <property name="nodeDao" ref="nodeDao" />
        <property name="snmpInterfaceDao" ref="snmpInterfaceDao" />
        <property name="ipInterfaceDao" ref="ipInterfaceDao" />
        <property name="topologyDao" ref="topologyDao"/>
        <property name="filterManager" ref="filterManager" />
        <property name="addNodeWithoutLink" value="true"/>
        <property name="linkdHopCriteriaFactory" ref="linkdHopCriteriaFactory" />
        <property name="lldpElementDao" ref="lldpElementDao" />
        <property name="lldpLinkDao" ref="lldpLinkDao" />
        <property name="cdpLinkDao" ref="cdpLinkDao"/>
        <property name="cdpElementDao" ref="cdpElementDao"/>
        <property name="ospfLinkDao" ref="ospfLinkDao"/>
        <property name="isisLinkDao" ref="isisLinkDao" />
        <property name="bridgeMacLinkDao" ref="bridgeMacLinkDao" />
        <property name="bridgeBridgeLinkDao" ref="bridgeBridgeLinkDao" />
        <property name="bridgeTopologyDao" ref="bridgeTopologyDao" />
        <property name="topologyProviderInfo" ref="enlinkdTopologyProviderInfo"/>
        <property name="ipNetToMediaDao" ref="ipNetToMediaDao"/>
    </bean>

    <!--
      Wrap the Linkd provider in a provider that calculates SZL based on hop distance from a set of
      focal vertices
    -->
    <reference id="enlinkd" interface="org.opennms.netmgt.model.ServiceDaemon" filter="(name=enlinkd)" availability="optional"/>

    <bean id="topologyHopProvider" class="org.opennms.features.topology.api.support.VertexHopGraphProvider">
        <argument ref="topologyProvider"/>
    </bean>

    <bean id="topologyACLProvider" class="org.opennms.features.topology.plugins.topo.linkd.internal.NodeACLVertexProvider">
        <argument ref="topologyHopProvider" />
        <argument ref="nodeDao" />
    </bean>

    <!-- Linkd Topology Provider Services -->
    <service ref="topologyACLProvider">
    	<interfaces>
    		<value>org.opennms.features.topology.api.topo.VertexProvider</value>
    		<value>org.opennms.features.topology.api.topo.EdgeProvider</value>
    		<value>org.opennms.features.topology.api.topo.GraphProvider</value>
    	</interfaces>
    </service>

    <!-- Meta topology provider -->
    <bean id="enhancedLinkdMetaTopologyProvider" class="org.opennms.features.topology.api.topo.SimpleMetaTopologyProvider">
        <argument ref="topologyACLProvider" />
    </bean>

    <service interface="org.opennms.features.topology.api.topo.MetaTopologyProvider" ref="enhancedLinkdMetaTopologyProvider">
        <service-properties>
            <entry key="label" value="Enhanced Linkd" />
        </service-properties>
    </service>

    <service interface="org.opennms.features.topology.api.topo.SearchProvider" ref="topologyProvider" />

    <!-- EnhancedLinkd StatusProviders Service and CheckedOperation -->
    <bean id="linkdEdgeStatusProvider" class="org.opennms.features.topology.plugins.topo.linkd.internal.LinkdEdgeStatusProvider">
        <property name="alarmDao" ref="alarmDao"/>
    </bean>

	<bean id="enlinkdWrappedEdgeStatusProvider" class="org.opennms.features.topology.plugins.topo.linkd.internal.LinkdWrappedEdgeStatusProviders" init-method="init">
        <property name="enlinkdService" ref="enlinkd" />
        <property name="edgeStatusProvider" ref="linkdEdgeStatusProvider"/>
    </bean>

    <service interface="org.opennms.features.topology.api.topo.EdgeStatusProvider" ref="enlinkdWrappedEdgeStatusProvider" />

    <!-- status provider -->
    <bean id="statusProvider" class="org.opennms.features.topology.plugins.topo.linkd.internal.AlarmStatusProvider">
        <argument ref="alarmDao"/>
    </bean>
    <service interface="org.opennms.features.topology.api.topo.StatusProvider" ref="statusProvider" />

    <!-- Icon definition -->
    <service>
        <interfaces>
            <value>org.opennms.features.topology.api.ConfigurableIconRepository</value>
            <value>org.osgi.service.cm.ManagedService</value>
        </interfaces>
        <service-properties>
            <entry key="service.pid" value="org.opennms.features.topology.app.icons.linkd"/>
        </service-properties>
        <bean class="org.opennms.features.topology.api.support.DefaultIconRepository" />
    </service>
</blueprint>
