/*
 * Licensed to The OpenNMS Group, Inc (TOG) under one or more
 * contributor license agreements.  See the LICENSE.md file
 * distributed with this work for additional information
 * regarding copyright ownership.
 *
 * TOG licenses this file to You under the GNU Affero General
 * Public License Version 3 (the "License") or (at your option)
 * any later version.  You may not use this file except in
 * compliance with the License.  You may obtain a copy of the
 * License at:
 *
 *      https://www.gnu.org/licenses/agpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: flowdocument.proto

package org.opennms.netmgt.flows.persistence.model;

/**
 * Protobuf enum {@code SamplingAlgorithm}
 */
public enum SamplingAlgorithm
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>UNASSIGNED = 0;</code>
   */
  UNASSIGNED(0),
  /**
   * <code>SYSTEMATIC_COUNT_BASED_SAMPLING = 1;</code>
   */
  SYSTEMATIC_COUNT_BASED_SAMPLING(1),
  /**
   * <code>SYSTEMATIC_TIME_BASED_SAMPLING = 2;</code>
   */
  SYSTEMATIC_TIME_BASED_SAMPLING(2),
  /**
   * <code>RANDOM_N_OUT_OF_N_SAMPLING = 3;</code>
   */
  RANDOM_N_OUT_OF_N_SAMPLING(3),
  /**
   * <code>UNIFORM_PROBABILISTIC_SAMPLING = 4;</code>
   */
  UNIFORM_PROBABILISTIC_SAMPLING(4),
  /**
   * <code>PROPERTY_MATCH_FILTERING = 5;</code>
   */
  PROPERTY_MATCH_FILTERING(5),
  /**
   * <code>HASH_BASED_FILTERING = 6;</code>
   */
  HASH_BASED_FILTERING(6),
  /**
   * <code>FLOW_STATE_DEPENDENT_INTERMEDIATE_FLOW_SELECTION_PROCESS = 7;</code>
   */
  FLOW_STATE_DEPENDENT_INTERMEDIATE_FLOW_SELECTION_PROCESS(7),
  UNRECOGNIZED(-1),
  ;

  /**
   * <code>UNASSIGNED = 0;</code>
   */
  public static final int UNASSIGNED_VALUE = 0;
  /**
   * <code>SYSTEMATIC_COUNT_BASED_SAMPLING = 1;</code>
   */
  public static final int SYSTEMATIC_COUNT_BASED_SAMPLING_VALUE = 1;
  /**
   * <code>SYSTEMATIC_TIME_BASED_SAMPLING = 2;</code>
   */
  public static final int SYSTEMATIC_TIME_BASED_SAMPLING_VALUE = 2;
  /**
   * <code>RANDOM_N_OUT_OF_N_SAMPLING = 3;</code>
   */
  public static final int RANDOM_N_OUT_OF_N_SAMPLING_VALUE = 3;
  /**
   * <code>UNIFORM_PROBABILISTIC_SAMPLING = 4;</code>
   */
  public static final int UNIFORM_PROBABILISTIC_SAMPLING_VALUE = 4;
  /**
   * <code>PROPERTY_MATCH_FILTERING = 5;</code>
   */
  public static final int PROPERTY_MATCH_FILTERING_VALUE = 5;
  /**
   * <code>HASH_BASED_FILTERING = 6;</code>
   */
  public static final int HASH_BASED_FILTERING_VALUE = 6;
  /**
   * <code>FLOW_STATE_DEPENDENT_INTERMEDIATE_FLOW_SELECTION_PROCESS = 7;</code>
   */
  public static final int FLOW_STATE_DEPENDENT_INTERMEDIATE_FLOW_SELECTION_PROCESS_VALUE = 7;


  public final int getNumber() {
    if (this == UNRECOGNIZED) {
      throw new IllegalArgumentException(
          "Can't get the number of an unknown enum value.");
    }
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @Deprecated
  public static SamplingAlgorithm valueOf(int value) {
    return forNumber(value);
  }

  public static SamplingAlgorithm forNumber(int value) {
    switch (value) {
      case 0: return UNASSIGNED;
      case 1: return SYSTEMATIC_COUNT_BASED_SAMPLING;
      case 2: return SYSTEMATIC_TIME_BASED_SAMPLING;
      case 3: return RANDOM_N_OUT_OF_N_SAMPLING;
      case 4: return UNIFORM_PROBABILISTIC_SAMPLING;
      case 5: return PROPERTY_MATCH_FILTERING;
      case 6: return HASH_BASED_FILTERING;
      case 7: return FLOW_STATE_DEPENDENT_INTERMEDIATE_FLOW_SELECTION_PROCESS;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<SamplingAlgorithm>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      SamplingAlgorithm> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<SamplingAlgorithm>() {
          public SamplingAlgorithm findValueByNumber(int number) {
            return SamplingAlgorithm.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return EnrichedFlowProtos.getDescriptor().getEnumTypes().get(1);
  }

  private static final SamplingAlgorithm[] VALUES = values();

  public static SamplingAlgorithm valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    if (desc.getIndex() == -1) {
      return UNRECOGNIZED;
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private SamplingAlgorithm(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:SamplingAlgorithm)
}

