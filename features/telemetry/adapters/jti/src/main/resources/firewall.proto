//
// Copyrights (c) 2015, Juniper Networks, Inc.
// All rights reserved.
//

//
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//

//
// Liang Zhang, 2015-05-29
//
// This file defines the messages in Protocol Buffers used by
// the firewall sensor. The top-level message is Firewall.
//
// Version 1.1
//

import "telemetry_top.proto";

//
// This occupies branch 6 from JuniperNetworksSensors
//
extend JuniperNetworksSensors {
    optional Firewall jnpr_firewall_ext   = 6;
}

//
// Top-level message
//
message Firewall {
    repeated FirewallStats firewall_stats = 1;
}

//
// Firewall filter statistics
//
message FirewallStats {
    required string filter_name           = 1 [(telemetry_options).is_key = true];

    // The Unix timestamp (seconds since 00:00:00 UTC 1970-01-01) of
    // last filter state change event such as filter add, filter change,
    // or counter clear.
    optional uint64 timestamp             = 2 [(telemetry_options).is_timestamp = true];

    repeated MemoryUsage memory_usage     = 3;
    repeated CounterStats counter_stats   = 4;
    repeated PolicerStats policer_stats   = 5;
    repeated HierarchicalPolicerStats hierarchical_policer_stats = 6;
}

//
// Memory usage
//
message MemoryUsage {
    // The router has typically several types of memories (e.g. CPU's memory,
    // ASIC's forwarding memories) in which the firewall object is written.
    // This field indicates the name of the memory subsystem whose utilization
    // is being reported.
    required string name                  = 1 [(telemetry_options).is_key = true];

    // The amount of the memory allocated in bytes to the filter
    optional uint64 allocated             = 2 [(telemetry_options).is_gauge = true];
}

//
// Counter statistics
//
message CounterStats {
    // Counter name
    required string name                  = 1 [(telemetry_options).is_key = true];

    // The total number of packets seen by the counter
    optional uint64 packets               = 2 [(telemetry_options).is_counter = true];

    // The total number of bytes seen by the counter
    optional uint64 bytes                 = 3 [(telemetry_options).is_counter = true];
}

//
// Policer statistics
//
message PolicerStats {
    // Policer instance name
    required string name                  = 1 [(telemetry_options).is_key = true];

    // The total number of packets marked out-of-specification by the policer
    optional uint64 out_of_spec_packets   = 2 [(telemetry_options).is_counter = true];

    // The total number of bytes marked out-of-specification by the policer
    optional uint64 out_of_spec_bytes     = 3 [(telemetry_options).is_counter = true];

    // Additional statistics when enhanced policer statistics are available
    optional ExtendedPolicerStats extended_policer_stats = 4;
}

//
// Extended policer statistics when enhanced policer statistics are available
//
message ExtendedPolicerStats {
    // The total number of packets subjected to policing
    optional uint64 offered_packets       = 1 [(telemetry_options).is_counter = true];

    // The total number of bytes subjected to policing
    optional uint64 offered_bytes         = 2 [(telemetry_options).is_counter = true];

    // The total number of packets not discarded by the policer
    optional uint64 transmitted_packets   = 3 [(telemetry_options).is_counter = true];

    // The total number of bytes not discarded by the policer
    optional uint64 transmitted_bytes     = 4 [(telemetry_options).is_counter = true];
}

//
// Hierarchical policer statistics
//
message HierarchicalPolicerStats {
    // Hierarchical policer instance name
    required string name                  = 1 [(telemetry_options).is_key = true];

    // The total number of packets marked out-of-specification by
    // the premium policer
    optional uint64 premium_packets       = 2 [(telemetry_options).is_counter = true];

    // The total number of bytes marked out-of-specification by
    // the premium policer
    optional uint64 premium_bytes         = 3 [(telemetry_options).is_counter = true];

    // The total number of packets marked out-of-specification by
    // the aggregate policer
    optional uint64 aggregate_packets     = 4 [(telemetry_options).is_counter = true];

    // The total number of bytes marked out-of-specification by
    // the aggregate policer
    optional uint64 aggregate_bytes       = 5 [(telemetry_options).is_counter = true];
}
