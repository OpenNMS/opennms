<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0" xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0"
           xsi:schemaLocation="
        http://www.osgi.org/xmlns/blueprint/v1.0.0
        https://osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
        http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0
        http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.3.0.xsd
        http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0
        http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.5.xsd
">

    <!--
        The Spring Application Context starts exposing the DAOs AFTER the dao-impl bundle has
        already been successfully started (Bundle-state: ACTIVE). This means it could be possible that the
        DaoServiceTester tries to dynamically pull in services via bundleContext.getServiceReferences(clazz)) which
        are not yet available. To avoid this, we reference at least one DAO here, to ensure gemini has finished
        exposing Spring Application Context services.
     -->
    <reference id="nodeDao" interface="org.opennms.netmgt.dao.api.NodeDao" availability="mandatory"/>

    <!-- Kick off the verification of the exposed DAOs -->
    <bean id="daoServiceTester" class="org.opennms.netmgt.dao.DaoServiceTester" init-method="verifyExposedDaos" >
        <argument ref="blueprintBundleContext" />
    </bean>

</blueprint>
