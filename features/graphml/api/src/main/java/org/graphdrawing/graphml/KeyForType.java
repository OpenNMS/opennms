/*
 * Licensed to The OpenNMS Group, Inc (TOG) under one or more
 * contributor license agreements.  See the LICENSE.md file
 * distributed with this work for additional information
 * regarding copyright ownership.
 *
 * TOG licenses this file to You under the GNU Affero General
 * Public License Version 3 (the "License") or (at your option)
 * any later version.  You may not use this file except in
 * compliance with the License.  You may obtain a copy of the
 * License at:
 *
 *      https://www.gnu.org/licenses/agpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 */
//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.11 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2016.05.17 at 02:59:53 PM CEST 
//


package org.graphdrawing.graphml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for key.for.type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="key.for.type"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *     &lt;enumeration value="all"/&gt;
 *     &lt;enumeration value="graphml"/&gt;
 *     &lt;enumeration value="graph"/&gt;
 *     &lt;enumeration value="node"/&gt;
 *     &lt;enumeration value="edge"/&gt;
 *     &lt;enumeration value="hyperedge"/&gt;
 *     &lt;enumeration value="port"/&gt;
 *     &lt;enumeration value="endpoint"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "key.for.type")
@XmlEnum
public enum KeyForType {

    @XmlEnumValue("all")
    ALL("all"),
    @XmlEnumValue("graphml")
    GRAPHML("graphml"),
    @XmlEnumValue("graph")
    GRAPH("graph"),
    @XmlEnumValue("node")
    NODE("node"),
    @XmlEnumValue("edge")
    EDGE("edge"),
    @XmlEnumValue("hyperedge")
    HYPEREDGE("hyperedge"),
    @XmlEnumValue("port")
    PORT("port"),
    @XmlEnumValue("endpoint")
    ENDPOINT("endpoint");
    private final String value;

    KeyForType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static KeyForType fromValue(String v) {
        for (KeyForType c: KeyForType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
