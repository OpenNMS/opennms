<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
  xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0"
  xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0
		http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0
		http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.1.xsd
">

  <!-- print startup message to karaf console -->
  <bean id="sayHello" class="org.opennms.plugins.elasticsearch.rest.SayHello" destroy-method="destroyMethod">
  </bean>

  <!-- Configuration properties -->
  <cm:property-placeholder id="esEventForwarderProperties" persistent-id="org.opennms.plugin.elasticsearch.rest.forwarder"
    update-strategy="reload">
    <cm:default-properties>
      <cm:property name="elasticsearchUrl" value="http://localhost:9200" />
      <cm:property name="esusername" value="" />
      <cm:property name="espassword" value="" />
      <cm:property name="logEventDescription" value="true" />
      <cm:property name="logAllEvents" value="false" />
      <cm:property name="archiveRawEvents" value="true" />
      <cm:property name="archiveAlarms" value="true" />
      <cm:property name="archiveAlarmChangeEvents" value="true" />
      <cm:property name="archiveOldAlarmValues" value="true" />
      <cm:property name="archiveNewAlarmValues" value="true" />
      <cm:property name="batchSize" value="1" /> <!-- Disable batching by default -->
      <cm:property name="batchInterval" value="0" /> <!-- Disable batching by default -->
      <cm:property name="threads" value="0" /> <!-- Use the default number of threads -->
      <cm:property name="cache_max_ttl" value="0" /> <!-- Set to zero to disable TTL -->
      <cm:property name="cache_max_size" value="10000" /> <!-- Set to zero to disable max size -->
    </cm:default-properties>
  </cm:property-placeholder>

  <reference id="nodeDao" interface="org.opennms.netmgt.dao.api.NodeDao" availability="mandatory" />
  <reference id="transactionOperations" interface="org.springframework.transaction.support.TransactionOperations" availability="mandatory" />

  <bean id="eventIpcManager" class="org.opennms.netmgt.events.api.EventIpcManagerFactory" factory-method="getIpcManager" />

  <bean id="eventListener" class="org.opennms.plugins.elasticsearch.rest.ForwardingEventListener" init-method="init" destroy-method="destroy">
    <property name="eventIpcManager" ref="eventIpcManager" />
    <property name="eventForwarder" ref="eventForwarder" />
  </bean>

  <!-- <bean id="eventForwarder" class=" org.opennms.plugins.elasticsearch.rest.EventForwarderImpl"> -->
  <!-- <property name="eventToIndex" ref="eventToIndex" /> -->
  <!-- </bean> -->

  <bean id="eventForwarder" class=" org.opennms.plugins.elasticsearch.rest.EventForwarderQueueImpl" init-method="init" destroy-method="close">
    <property name="batchSize" value="${batchSize}" />
    <property name="batchInterval" value="${batchInterval}" />
    <property name="eventToIndex" ref="eventToIndex" />
    <property name="elasticSearchInitialiser" ref="elasticSearchInitialiser" />
  </bean>


  <bean id="nodeDataCache" class="org.opennms.plugins.elasticsearch.rest.NodeCacheImpl" init-method="init">
    <property name="nodeDao" ref="nodeDao" />
    <property name="transactionOperations" ref="transactionOperations" />
    <property name="MAX_TTL" value="${cache_max_ttl}" />
    <property name="MAX_SIZE" value="${cache_max_size}" />
  </bean>

  <bean id="restClientFactory" class="org.opennms.plugins.elasticsearch.rest.RestClientFactory">
    <argument value="${elasticsearchUrl}" />
    <argument value="${esusername}" />
    <argument value="${espassword}" />
  </bean>


  <bean id="eventToIndex" class="org.opennms.plugins.elasticsearch.rest.EventToIndex" destroy-method="close">
    <property name="restClientFactory" ref="restClientFactory" />
    <property name="nodeCache" ref="nodeDataCache" />
    <property name="indexNameFunction" ref="indexNameFunction" />
    <property name="logEventDescription" value="${logEventDescription}" />
    <property name="logAllEvents" value="${logAllEvents}" />
    <property name="threads" value="${threads}" />
    <property name="archiveRawEvents" value="${archiveRawEvents}" />
    <property name="archiveAlarms" value="${archiveAlarms}" />
    <property name="archiveAlarmChangeEvents" value="${archiveAlarmChangeEvents}" />
    <property name="archiveOldAlarmValues" value="${archiveOldAlarmValues}" />
    <property name="archiveNewAlarmValues" value="${archiveNewAlarmValues}" />
  </bean>

  <bean id="indexNameFunction" class="org.opennms.plugins.elasticsearch.rest.IndexNameFunction">
    <argument value="yyyy.MM" />
  </bean>

  <bean id="elasticSearchInitialiser" class="org.opennms.plugins.elasticsearch.rest.ElasticSearchInitialiser" init-method="init" destroy-method="destroy">
    <property name="restClientFactory" ref="restClientFactory" />
    <property name="templateFiles">
      <!-- map of template files to load: key = template name (must be lower case) value= json file to load -->
      <map>

        <entry key="eventsindextemplate" value="eventsIndexTemplate.json" />
        <!-- <entry key=”alarmEventsIndexTemplate” value=”alarmEventsIndexTemplate.json” /> -->
        <!-- <entry key=”alarmsIndexTemplate” value=”alarmsIndexTemplate.json” /> -->
      </map>
    </property>
  </bean>

  <bean id="openNMSHistoricEventsToEs" class="org.opennms.plugins.elasticsearch.rest.archive.OpenNMSHistoricEventsToEs">
    <property name="eventForwarder" ref="eventForwarder" />
  </bean>

  <!-- command line commands -->
  <command-bundle xmlns="http://karaf.apache.org/xmlns/shell/v1.0.0">

    <!-- send events to Elasticsearch -->
    <command name="elastic-search/send-historic-events">
      <action class="org.opennms.plugins.elasticsearch.rest.archive.cmd.SendEventsToEsCommand">
        <property name="openNMSHistoricEventsToEs" ref="openNMSHistoricEventsToEs" />
      </action>
    </command>
  </command-bundle>

</blueprint>
