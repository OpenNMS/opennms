<!DOCTYPE html>
<html>
    <head>
        <title>NRT graph window</title>

        <meta charset="utf-8" />
        <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=IE8" />

        <!-- jquery include -->
        <script type="text/javascript" src="/opennms/js/jquery/jquery-1.8.2.min.js"></script>

        <!-- Amq includes -->
        <script type="text/javascript" src="/opennms/js/amq_jquery_adapter.js"></script>
        <script type="text/javascript" src="/opennms/js/amq.js"></script>

        <!-- d3js includes -->
        <script type="text/javascript" src="/opennms/js/d3.v2.js"></script>
        <script type="text/javascript" src="/opennms/js/simpledateformat.js"></script>
        <script type="text/javascript" src="/opennms/js/rrdgraph.js"></script>

        <!-- CSS include -->
        <link rel="stylesheet" type="text/css" href="/opennms/css/styles.css" media="screen" />
    
        <script type="text/javascript">

// ************************************************
// * Begin of NRT JavaScript
// ************************************************

// On load function

    $(function() {
    
        // Receive inbound JavaScript variables from the controller.

        var collectionTaskId = "${nrtCollectionTaskId}";
        var rrdGraphString = "${rrdGraphString}";

        var metricsMapping = {
            ${metricsMapping}
        };

        // Represents the frequency of data requests.
        var jobPublishingInterval = 1000;
    
        // Create and initialize graph and real time wrapper
        var graphs = RRDGraph.init('.rrdgraph', rrdGraphString);
        var graph = graphs[0];
        var dataCollector = new RRDGraph.DataCollector(graph.config, graph.data, metricsMapping);
    
        var firstDataSet = true;
        var counterMetrics;
        var counterMetricsValues;
        var counterMetricsTimeStamps;



        var debug_jobrequest_sent=0;

        // Timer for  AJAX nrtCollectionJobTrigger to republish the CollectionJobCollectionJob

        var refreshTimerJob = {
            // submits the AJAX collection job request and requeues the timer.
            submitJob: function() {
                $.ajax({
                    type: 'GET',
                    url: '/opennms/nrt/starter',
                    cache: false,
                    data: {
                        poll: 'true',
                        nrtCollectionTaskId: collectionTaskId
                    },
                    success: function (messages) {
                    if (messages != null && messages != '') {
                        $("#debug_messages").html(messages);
                        var result = $.parseJSON(messages);
                        var measurementSets = result['measurement_sets'];
                        //var messagesArray = eval(messages);

                        for(var x=0; x < measurementSets.length; x++) {
                            var measurementSet = measurementSets[x];

                            if (!(measurementSet instanceof Array)) {
                                $("#errorDiv").html("Error in message '"+messages+"': element "+x+" ('"+measurementSet+"') is not an array");
                            }

                            // Debug output
                            $("#debug_messages_received").html(parseInt($("#debug_messages_received").html()) + 1);
                            $("#debug_datasets_received").html(parseInt($("#debug_datasets_received").html()) + measurementSet.length);

                            measurementSet = $.map(measurementSet, function(e, i) {
                                temp = {
                                    'metricId': e['metricId'],
                                    'metricType': e['metricType'],
                                    'netInterface': e['netInterface'],
                                    'nodeId': e['nodeId'],
                                    'service': e['service'],
                                    'timeStamp': parseInt(e['timeStamp']),
                                    'value': parseInt(e['value'])
                                };

                                if (temp.metricType == "counter32" || temp.metricType == "counter64") {
                                    // first counterMetric ever? Build arrays for metricId and values
                                    if (counterMetrics == null) {
                                        counterMetrics = new Array();
                                        counterMetricsValues = new Array();
                                        counterMetricsTimeStamps = new Array();
                                        counterMetrics[0] = temp.metricId;
                                        counterMetricsValues[0] = temp.value;
                                        counterMetricsTimeStamps[0] = temp.timeStamp;
                                    } else {
                                        // there was a counterMetric before, check it metricId is known
                                        var newMetric = -1;
                                        for (var i = 0; i < counterMetrics.length; i++) {
                                            if (counterMetrics[i] == temp.metricId) {
                                                newMetric = i;
                                            }
                                        }
                                        if (newMetric == -1) {
                                            counterMetrics.push(temp.metricId);
                                            counterMetricsValues.push(temp.value);
                                            counterMetricsTimeStamps.push(temp.timeStamp);
                                        } else {
                                            // there is an old value for this counter metric
                                            var valueDiff = temp.value - counterMetricsValues[newMetric];
                                            counterMetricsValues[newMetric] = temp.value;

                                            timeDiff = temp.timeStamp - counterMetricsTimeStamps[newMetric];
                                            counterMetricsTimeStamps[newMetric] = temp.timeStamp;

                                            temp.value = valueDiff * (1000.0 / timeDiff);
                                        }
                                    }
                                }
                                return temp;
                            });

                            // skip pushing the data into the graph for the first dataset with counters

                            if (firstDataSet) {
                                firstDataSet = false;
                                if (counterMetrics != null) {
                                    return;
                                }
                            }
                            dataCollector.push(measurementSet);
                        }
                    }
                }});
                this.timeoutID = setTimeout(function(){refreshTimerJob.submitJob()}, this.jobPublishingInterval);
                debug_jobrequest_sent++;
                document.getElementById('debug_jobrequest_sent').innerHTML = debug_jobrequest_sent;
            },

            // Used for setting up and starting the refresh timer job.
            setup: function(refreshTicks) {
                this.stop();
                this.jobPublishingInterval = refreshTicks;
                this.timeoutID = setTimeout(function(){refreshTimerJob.submitJob()}, this.jobPublishingInterval);
            },

            // Used for stopping the refresh timer.
            stop: function() {
                if(typeof this.timeoutID == "number") {
                    clearTimeout(this.timeoutID);
                    delete this.timeoutID;
                }
            }
        };
    
        // Set up the input box that allows us to adjust the interval in which data points are graphed.
        $('#jobPublishingInterval').val(jobPublishingInterval);
        $('#jobPublishingInterval').bind('change', function() {
            jobPublishingInterval = $(this).val();
            if (isPaused == 0) {
                refreshTimerJob.setup(jobPublishingInterval);
            }
        });
    
        // Start the AJAX job timer.
        refreshTimerJob.setup(jobPublishingInterval);

        // define playback state
        var isPaused = 0;

        // add play/pause handler
        $('#pause').live('change', function() {
            isPaused = $(this).is(':checked');

            if (isPaused == 1) {
                // stop code
                refreshTimerJob.stop();
            } else {
                // start code
                refreshTimerJob.setup(jobPublishingInterval);
            }
        });
        
        $('#displayMode').live('change', function() {
            graph.config.options.compress = $(this).val() === 'COMPRESS';
//            TODO change compress vs fixed mode for the graph
//            var compress_toggle_text = graph.config.options.compress ? 'COMPRESS' : 'FIXED';
//            graph.svg.compress_toggle.text(compress_toggle_text);
        });

        // add debug-link handler
        $('#debugLink').bind('click', function() {
            if (document.getElementById('debug').style.display == 'none') {
                document.getElementById('debug').style.display = 'block';
            } else {
                document.getElementById('debug').style.display = 'none';
            }
        });
    });

// ************************************************
// * End of NRT JavaScript
// ************************************************

        </script>
    </head>
       
    <body>

        <div id="main"></div>
        <center>
            <div class="rrdgraph" data-src="realtime=1"></div>
            <div id="nrtControls" style="font-size: 11px">
                Pause: <input type="checkbox" name="pause" value="pause" id="pause"/>
                
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                Interval: <select id="jobPublishingInterval" type="select">
                    <option value="250">0.25s</option>
                    <option value="1000" selected>1.00s</option>
                    <option value="5000">5.00s</option>
                    <option value="10000">10.00s</option>
                    <option value="30000">30.00s</option>
                    <option value="60000">60.00s</option>
                </select>
<!-- TODO change compress vs fixed mode for the graph -->
<!--                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                Display-Mode: <select id="displayMode" type="select">
                    <option value="COMPRESS" selected="selected">Compressed</option>
                    <option value="FIXED">Fixed</option>
                </select>
-->
                
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <a id='debugLink' href="#">Debug &#9660</a>
            </div>
        </center>

        <div id="debug" style="display:none;">
            <table border="1" width="75%">
                <tr>
                    <td><b>CollectionTaskId</b></td>
                    <td><div id="debug_nrt_collection_taks_id">${nrtCollectionTaskId}</div></td>
                </tr>
                <tr>
                    <td><b>Error message(s)</b></td>
                    <td><div id="errorDiv"></div></td>
                </tr><tr>
                    <td><b>JobRequest(s) sent</b></td>
                    <td><div id="debug_jobrequest_sent">0</div></td>
                </tr><tr>
                    <td><b>Message(s) received<b></td>
                    <td><div id="debug_messages_received">0</div></td>
                </tr><tr>
                    <td><b>Dataset(s) received<b></td>
                    <td><div id="debug_datasets_received">0</div></td>
                </tr><tr>
                    <td><b>Last message received<b></td>
                    <td><div id="debug_messages"></div></td>
                </tr><tr>
                    <td><b>RRD command<b></td>
                    <td><div id="debug_rrd_string">${rrdGraphString}</div></td>
                </tr><tr>
                    <td><b>Metrics mapping<b></td>
                    <td><div id="debug_metrics_mapping">${metricsMapping}</div></td>
                </tr>
            </table>
        </div>
    </body>
</html>
