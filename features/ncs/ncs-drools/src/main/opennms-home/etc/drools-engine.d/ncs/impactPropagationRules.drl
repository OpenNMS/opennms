package org.opennms.netmgt.correlation.ncs.impact;

import function org.opennms.core.utils.InetAddressUtils.addr;
import function org.opennms.core.utils.InetAddressUtils.str;

import java.util.Date;
import java.net.InetAddress;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;

import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.correlation.ncs.*;
import org.opennms.netmgt.model.ncs.*;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.xml.event.Parms;
import org.opennms.netmgt.xml.event.Value;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.drools.core.spi.KnowledgeHelper;
import org.opennms.netmgt.model.events.EventUtils;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.ncs.NCSCorrelationService correlationService;

/*
 * ComponentDownEvent indicates an alarm
 * ComponentUpEvent indicates an alarm resolution
 *
 * ComponentEventResolved indicates a pairing of alarm and resolution
 *
 * ComponentImpacted indicates an outage with a cause
 *
 * DependenciesNeeded indicates that I need to ensure the dependencies on a component are loaded
 * 
 * ImpactEventSent indicates that we sent the impact event
 *
 */
 
rule "component down event"
	salience 100
when
	$cde: ComponentDownEvent( $c : component, $e : event )
then
	println( "Component '" + $c.getName() + "' is impacted!" );
	insert( new ComponentImpacted( $c, $cde ) );
	insert( new DependenciesNeeded( $c, $cde ) ); 
end

rule "send impact events"
	salience 100
when
	ComponentImpacted ( $c : target, $cause : cause )
	not ImpactEventSent( component == $c )
then
	println( "Sending impact event for '" + $c.getName() + "'");
	sendComponentImpactedEvent( engine, $c, $cause.getEvent() );
	insert( new ImpactEventSent( $c, $cause ) );
end
	

rule "propagate impact"
	when
		ComponentImpacted( $child : target, $cde : cause )
		DependsOn( $parent : a, b == $child )
	
	then
		println( "Parent component '" + $parent.getName() + "' is impacted!" );
		insert( new ComponentImpacted( $parent, $cde ) );
		insert( new DependenciesNeeded( $parent, $cde ) ); 
	
end

rule "component up event"
	salience 100
when
	$cde : ComponentDownEvent( $c : component, $downEvent : event )
	$cue : ComponentUpEvent( component == $c )
then
	println( "Found resolution for " + $cde );
	retract( $cde );
	retract( $cue );
	insert( new ComponentEventResolved( $cde, $cue ) );
end

rule "resolved component"
	salience 1000
when
	$r : ComponentEventResolved( $cause : cause )
	$i : ComponentImpacted( cause == $cause, $c : target )
	$d : DependenciesNeeded( requestor == $cause )
then
	retract( $d );
	retract( $i );
end

rule "clean up resolutions"
when
	$r : ComponentEventResolved( $c : cause )
	not( ComponentImpacted( cause == $c ) )
then
	println( "Cleanup up resolve " + $r );
	retract( $r );
end

rule "send resolution event"
when
	$i : ImpactEventSent( $c : component, $cause : cause )
	not( ComponentImpacted( target == $c ) )
then
	println( "Sending resolution event for '" + $c.getName() + "'" );
	retract( $i );
	sendComponentResolvedEvent( engine, $c, $cause.getEvent() );
end

function void println(Object msg)
{
	System.err.println(new Date() + " : " + msg);
}


function void sendComponentImpactedEvent( DroolsCorrelationEngine engine, Component c, Event e )
{
	EventBuilder bldr = new EventBuilder( "uei.opennms.org/internal/ncs/componentImpacted", "Component Correlator" );
	bldr.addParam("componentType", c.getType() );
	bldr.addParam("componentName", c.getName() );
	bldr.addParam("componentForeignSource", c.getForeignSource() );
	bldr.addParam("componentForeignId", c.getForeignId() );
	bldr.addParam("cause", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}


function void sendComponentResolvedEvent( DroolsCorrelationEngine engine, Component c, Event e)
{
	EventBuilder bldr = new EventBuilder( "uei.opennms.org/internal/ncs/componentResolved", "Component Correlator" );
	bldr.addParam("componentType", c.getType() );
	bldr.addParam("componentName", c.getName() );
	bldr.addParam("componentForeignSource", c.getForeignSource() );
	bldr.addParam("componentForeignId", c.getForeignId() );
	bldr.addParam("cause", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}



