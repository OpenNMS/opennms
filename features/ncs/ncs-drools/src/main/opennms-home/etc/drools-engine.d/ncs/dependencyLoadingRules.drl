package org.opennms.netmgt.correlation.ncs.dep;

import function org.opennms.core.utils.InetAddressUtils.addr;
import function org.opennms.core.utils.InetAddressUtils.str;

import java.util.Date;
import java.net.InetAddress;
import java.util.List;
import java.util.ArrayList;
import java.util.HashSet;


import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.correlation.ncs.*;
import org.opennms.netmgt.model.ncs.*;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.xml.event.Parm;
import org.opennms.netmgt.xml.event.Parms;
import org.opennms.netmgt.xml.event.Value;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.events.api.EventConstants;
import org.drools.core.spi.KnowledgeHelper;
import org.opennms.netmgt.model.events.EventUtils;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;
global org.opennms.netmgt.correlation.ncs.NCSCorrelationService correlationService;


rule "assert components"
salience 10000
when
	DependenciesNeeded( $c : component, $id : component.id )
	not Component( id == $id )
then
	insert( $c );
end

rule "retract components"
salience 10000
when
	$c: Component( )
	not DependenciesNeeded( component == $c )
then
	retract( $c );
end

rule "retract dependendencies of type ALL"
salience 20000
when
	$c: Component( )
	not DependenciesNeeded( component == $c )
	$d : DependsOn( b == $c )
then
	retract( $d );
end

rule "load dependencies"
	salience 10000
when
	$c : Component( )
	exists DependenciesNeeded( component == $c )
then
		println("load dependencies triggered");
		Component c = $c;
		List<NCSComponent> list = correlationService.findComponentsThatDependOn( c.getId() );
		for ( NCSComponent ncsParent : list ) {
			Component parent = new Component( ncsParent );
			if ( parent.getDependenciesRequired() != NCSComponent.DependencyRequirements.ANY ) {
				println( "Parent component '" + parent.getName() + "' depends on " + c.getName() );
				insert( new DependsOn( parent, c ) );
			}
// POSTPONE DependsOnAny support			
//			else {
//				List<NCSComponent> ncsChildren = correlationService.findSubComponents( parent.getId() );
//				List<Component> children = new ArrayList<Component>( ncsChildren.size() );
//				for ( NCSComponent ncsChild : ncsChildren ) {
//					Component child = new Component( ncsChild );
//					children.add( child );
//				}
//				insert( new DependsOnAny( parent, children ) );
//				println( "Inserted DependsOnAny for " + parent );			
//			}
			
		}
end


function void println(Object msg)
{
	System.err.println(new Date() + " : " + msg);
}

