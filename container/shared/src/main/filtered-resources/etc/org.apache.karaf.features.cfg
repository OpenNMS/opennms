################################################################################
#
#    Licensed to the Apache Software Foundation (ASF) under one or more
#    contributor license agreements.  See the NOTICE file distributed with
#    this work for additional information regarding copyright ownership.
#    The ASF licenses this file to You under the Apache License, Version 2.0
#    (the "License"); you may not use this file except in compliance with
#    the License.  You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#    Unless required by applicable law or agreed to in writing, software
#    distributed under the License is distributed on an "AS IS" BASIS,
#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#    See the License for the specific language governing permissions and
#    limitations under the License.
#
################################################################################

# OPENNMS: Override Karaf's standard-${karafVersion}-features.xml with our customized version with the HTTP bridge code
# and override Karaf's spring-${karafVersion}-features.xml and spring-legacy-${karafVersion}-features.xml with our versions
# that point to the modified standard features.
# OPENNMS: Include the main product features file generated by the mvn:org.opennms.karaf/opennms project
featuresRepositories = \
    mvn:org.apache.karaf.features/standard/${karafVersion}/xml/features, \
    mvn:org.opennms.karaf/opennms/${project.version}/xml/spring-legacy, \
    mvn:org.apache.karaf.features/framework/${karafVersion}/xml/features, \
    mvn:org.opennms.karaf/opennms/${project.version}/xml/karaf-extensions, \
    mvn:org.opennms.karaf/opennms/${project.version}/xml/features, \
    mvn:io.hawt/hawtio-karaf/${hawtio.version}/xml/features

# OPENNMS: Parenthesize standard Karaf boot features, add OpenNMS product features
featuresBoot = ( \
    instance/${karafVersion}, \
    package/${karafVersion}, \
    log/${karafVersion}, \
    ssh/${karafSshdVersion}, \
    framework/${karafVersion}, \
    system/${karafVersion}, \
    eventadmin/${karafVersion}, \
    feature/${karafVersion}, \
    shell/${karafVersion}, \
    management/${karafVersion}, \
    service/${karafVersion}, \
    jaas/${karafVersion}, \
    deployer/${karafVersion}, \
    diagnostic/${karafVersion}, \
    wrap/${paxUrlAetherVersion}, \
    bundle/${karafVersion}, \
    config/${karafVersion}, \
    kar/${karafVersion} \
  ), \
  ( \
    aries-blueprint/${karafVersion}, \
    jaas-deployer/${karafVersion}, \
    jasypt-encryption/${karafVersion}, \
    shell-compat/${karafVersion} \
  ), \
  commons-codec/${commonsCodecVersion}, \
  karaf-extender/${project.version},
  http, \
  guava/${guavaOsgiVersion}, \
  hawtio/${hawtio.version}, \
  jolokia/${jolokiaVersion}

#
# Resource repositories (OBR) that the features resolver can use
# to resolve requirements/capabilities
#
# The format of the resourceRepositories is 
# resourceRepositories=[xml:url|json:url],...
# for Instance:
#
#resourceRepositories=xml:http://host/path/to/index.xml
# or
#resourceRepositories=json:http://host/path/to/index.json
#

#
# Defines if the boot features are started in asynchronous mode (in a dedicated thread)
#
featuresBootAsynchronous=false

#
# Define if the feature service automatically refreshes bundles
#
autoRefresh=true

#
# Service requirements enforcement
#
# By default, the feature resolver checks the service requirements/capabilities of
# bundles for new features (xml schema >= 1.3.0) in order to automatically installs
# the required bundles.
# The following flag can have those values:
#   - disable: service requirements are completely ignored
#   - default: service requirements are ignored for old features
#   - enforce: service requirements are always verified
#
#serviceRequirements=default

#
# Store cfg file for config element in feature
#
#configCfgStore=true

#
# Configuration of features processing mechanism (overrides, blacklisting, modification of features)
# XML file defines instructions related to features processing
# versions.properties may declare properties to resolve placeholders in XML file
# both files are relative to ${karaf.etc}
#
#featureProcessing=org.apache.karaf.features.xml
#featureProcessingVersions=versions.properties
