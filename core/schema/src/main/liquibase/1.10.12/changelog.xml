<?xml version="1.0" encoding="UTF-8"?>

<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:opennms="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xsi:schemaLocation="
        http://www.liquibase.org/xml/ns/dbchangelog     http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-2.0.xsd
        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd
    ">

    <!-- The vulnerabilities database goes away in the future, so consider updating it non-fatal. -->
    <changeSet author="rangerrick" id="1.10.12-unique-service-type-vulnerabilities">
		<preConditions onFail="MARK_RAN">
			<tableExists tableName="vulnerabilities" />
		</preConditions> 
        <sql>
--# Update vulnerabilities, setting the serviceid to the lowest ID for a given service name
UPDATE vulnerabilities SET serviceid=bad.good_serviceid FROM (
   SELECT
      serviceid AS bad_serviceid,
      (SELECT min(serviceid) FROM service s WHERE s.servicename=t.servicename) AS good_serviceid
   FROM (
      SELECT
         serviceid, servicename
      FROM
         service
      WHERE
         serviceid NOT IN (
            SELECT
               min(serviceid)
            FROM
               service
            GROUP BY
               servicename
         )
      ORDER BY serviceid
   ) t
) bad
WHERE
   serviceid=bad.bad_serviceid;
        </sql>
    </changeSet>

    <!-- Fix duplicate service IDs. -->
    <changeSet author="rangerrick" id="1.10.12-unique-service-type">
        <sql>
--# Update alarms, setting the serviceid to the lowest ID for a given service name
UPDATE alarms SET serviceid=bad.good_serviceid FROM (
   SELECT
      serviceid AS bad_serviceid,
      (SELECT min(serviceid) FROM service s WHERE s.servicename=t.servicename) AS good_serviceid
   FROM (
      SELECT
         serviceid, servicename
      FROM
         service
      WHERE
         serviceid NOT IN (
            SELECT
               min(serviceid)
            FROM
               service
            GROUP BY
               servicename
         )
      ORDER BY serviceid
   ) t
) bad
WHERE
   serviceid=bad.bad_serviceid;

--# Update events, setting the serviceid to the lowest ID for a given service name
UPDATE events SET serviceid=bad.good_serviceid FROM (
   SELECT
      serviceid AS bad_serviceid,
      (SELECT min(serviceid) FROM service s WHERE s.servicename=t.servicename) AS good_serviceid
   FROM (
      SELECT
         serviceid, servicename
      FROM
         service
      WHERE
         serviceid NOT IN (
            SELECT
               min(serviceid)
            FROM
               service
            GROUP BY
               servicename
         )
      ORDER BY serviceid
   ) t
) bad
WHERE
   serviceid=bad.bad_serviceid;

--# Update ifServices, setting the serviceid to the lowest ID for a given service name
UPDATE ifservices SET serviceid=bad.good_serviceid FROM (
   SELECT
      serviceid AS bad_serviceid,
      (SELECT min(serviceid) FROM service s WHERE s.servicename=t.servicename) AS good_serviceid
   FROM (
      SELECT
         serviceid, servicename
      FROM
         service
      WHERE
         serviceid NOT IN (
            SELECT
               min(serviceid)
            FROM
               service
            GROUP BY
               servicename
         )
      ORDER BY serviceid
   ) t
) bad
WHERE
   serviceid=bad.bad_serviceid;

--# Update notifications, setting the serviceid to the lowest ID for a given service name
UPDATE notifications SET serviceid=bad.good_serviceid FROM (
   SELECT
      serviceid AS bad_serviceid,
      (SELECT min(serviceid) FROM service s WHERE s.servicename=t.servicename) AS good_serviceid
   FROM (
      SELECT
         serviceid, servicename
      FROM
         service
      WHERE
         serviceid NOT IN (
            SELECT
               min(serviceid)
            FROM
               service
            GROUP BY
               servicename
         )
      ORDER BY serviceid
   ) t
) bad
WHERE
   serviceid=bad.bad_serviceid;

--# Update outages, setting the serviceid to the lowest ID for a given service name
UPDATE outages SET serviceid=bad.good_serviceid FROM (
   SELECT
      serviceid AS bad_serviceid,
      (SELECT min(serviceid) FROM service s WHERE s.servicename=t.servicename) AS good_serviceid
   FROM (
      SELECT
         serviceid, servicename
      FROM
         service
      WHERE
         serviceid NOT IN (
            SELECT
               min(serviceid)
            FROM
               service
            GROUP BY
               servicename
         )
      ORDER BY serviceid
   ) t
) bad
WHERE
   serviceid=bad.bad_serviceid;

--# remove obsolete service IDs
DELETE FROM
  service
WHERE
   serviceid NOT IN (
      SELECT
         min(serviceid)
      FROM
         service
      GROUP BY
         servicename
   )
;
        </sql>
        <addUniqueConstraint tableName="service" columnNames="servicename" />
        <opennms:setSequence sequenceName="servicenxtid">
            <opennms:table name="service" column="serviceid" />
        </opennms:setSequence>
        <rollback>
          <dropUniqueConstraint tableName="service" uniqueColumns="servicename" />
        </rollback>
    </changeSet>

</databaseChangeLog>
