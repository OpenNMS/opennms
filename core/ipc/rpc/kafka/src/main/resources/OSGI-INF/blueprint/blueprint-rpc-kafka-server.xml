<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0"
    xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0"
    xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0 
		https://osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.3.0
		http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.3.0.xsd
		http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.5.0
		http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.5.xsd
		http://camel.apache.org/schema/blueprint
		http://camel.apache.org/schema/blueprint/camel-blueprint-2.19.1.xsd
">

    <!-- See https://kafka.apache.org/10/documentation.html#producerconfigs, https://kafka.apache.org/10/documentation.html#consumerconfigs
         for the list of supported properties -->
    <cm:property-placeholder id="kafkaProperties" persistent-id="org.opennms.core.ipc.rpc.kafka"
                             update-strategy="reload"/>
    <!-- Provided by minion-core -->
    <reference id="minionIdentity" interface="org.opennms.distributed.core.api.MinionIdentity"/>

    <reference id="configAdmin" interface="org.osgi.service.cm.ConfigurationAdmin"/>

    <reference id="tracerRegistry" interface="org.opennms.core.tracing.api.TracerRegistry"/>

    <!-- Config Provider -->
    <bean id="kafkaConfigProvider" class="org.opennms.core.ipc.common.kafka.OsgiKafkaConfigProvider">
      <!-- same as persistent-id -->
      <argument value="org.opennms.core.ipc.rpc.kafka"/>
      <argument ref="configAdmin"/>
        <!-- common pid for kafka config on IPC-->
      <argument value="org.opennms.core.ipc.kafka"/>
    </bean>

    <bean id="kafkaRpcServerManager" class="org.opennms.core.ipc.rpc.kafka.KafkaRpcServerManager"
          init-method="init" destroy-method="destroy">
      <argument ref="kafkaConfigProvider"/>
      <argument ref="minionIdentity"/>
      <argument ref="tracerRegistry"/>
      <argument ref="metricRegistry"/>
    </bean>

    <reference-list id="rpcModulesRef" interface="org.opennms.core.rpc.api.RpcModule" availability="optional">
      <reference-listener bind-method="bind" unbind-method="unbind" ref="kafkaRpcServerManager"/>
    </reference-list>

    <!-- Kafka HealthCheck for RPC -->

    <service interface="org.opennms.core.health.api.HealthCheck">
      <bean class="org.opennms.core.ipc.common.kafka.KafkaHealthCheck" >
        <argument ref="kafkaConfigProvider"/>
        <argument value="RPC" />
      </bean>
    </service>

     <!-- Kafka RPC Metrics -->
    <bean id="metricRegistry" class="com.codahale.metrics.MetricRegistry"/>
    <service ref="metricRegistry" interface="com.codahale.metrics.MetricSet">
      <service-properties>
        <entry key="name" value="Minion Kafka RPC" />
        <entry key="description" value="Kafka RPC Metrics on Minion" />
      </service-properties>
    </service>

    <bean id="metricRegistryJmxReporterBuilder" class="com.codahale.metrics.jmx.JmxReporter" factory-method="forRegistry">
      <argument ref="metricRegistry"/>
    </bean>

    <bean id="metricRegistryDomainedJmxReporterBuilder" factory-ref="metricRegistryJmxReporterBuilder" factory-method="inDomain">
      <argument value="org.opennms.core.ipc.rpc.kafka"/>
    </bean>

    <bean id="metricRegistryJmxReporter"
          factory-ref="metricRegistryJmxReporterBuilder"
          factory-method="build"
          init-method="start"
          destroy-method="stop" />

</blueprint>
