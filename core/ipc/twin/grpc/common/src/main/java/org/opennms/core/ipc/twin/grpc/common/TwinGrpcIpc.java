/*
 * Licensed to The OpenNMS Group, Inc (TOG) under one or more
 * contributor license agreements.  See the LICENSE.md file
 * distributed with this work for additional information
 * regarding copyright ownership.
 *
 * TOG licenses this file to You under the GNU Affero General
 * Public License Version 3 (the "License") or (at your option)
 * any later version.  You may not use this file except in
 * compliance with the License.  You may obtain a copy of the
 * License at:
 *
 *      https://www.gnu.org/licenses/agpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the
 * License.
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: twin-grpc.proto

package org.opennms.core.ipc.twin.grpc.common;

public final class TwinGrpcIpc {
  private TwinGrpcIpc() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  static final com.google.protobuf.Descriptors.Descriptor
    internal_static_MinionHeader_descriptor;
  static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_MinionHeader_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\017twin-grpc.proto\032\022twin-message.proto\"3\n" +
      "\014MinionHeader\022\021\n\tsystem_id\030\001 \001(\t\022\020\n\010loca" +
      "tion\030\002 \001(\t2\205\001\n\016OpenNMSTwinIpc\022;\n\014RpcStre" +
      "aming\022\021.TwinRequestProto\032\022.TwinResponseP" +
      "roto\"\000(\0010\001\0226\n\rSinkStreaming\022\r.MinionHead" +
      "er\032\022.TwinResponseProto\"\0000\001B6\n%org.opennm" +
      "s.core.ipc.twin.grpc.commonB\013TwinGrpcIpc" +
      "P\001b\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.opennms.core.ipc.twin.model.TwinMessageProto.getDescriptor(),
        });
    internal_static_MinionHeader_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_MinionHeader_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_MinionHeader_descriptor,
        new java.lang.String[] { "SystemId", "Location", });
    org.opennms.core.ipc.twin.model.TwinMessageProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
