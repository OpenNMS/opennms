/*******************************************************************************
 * This file is part of OpenNMS(R).
 *
 * Copyright (C) 2009-2014 The OpenNMS Group, Inc.
 * OpenNMS(R) is Copyright (C) 1999-2014 The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is a registered trademark of The OpenNMS Group, Inc.
 *
 * OpenNMS(R) is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License,
 * or (at your option) any later version.
 *
 * OpenNMS(R) is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with OpenNMS(R).  If not, see:
 *      http://www.gnu.org/licenses/
 *
 * For more information contact:
 *     OpenNMS(R) Licensing <license@opennms.org>
 *     http://www.opennms.org/
 *     http://www.opennms.com/
 *******************************************************************************/

//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0.3-b01-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2009.01.29 at 01:15:48 PM EST 
//


package org.opennms.netmgt.model.requisition;

import java.io.Serializable;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CollectionTable;
import javax.persistence.Column;
import javax.persistence.ElementCollection;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;


@Entity
@Table(name="requisition_node_interface_services")
public class RequisitionMonitoredServiceEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    @Id
    @Column(nullable=false)
    @SequenceGenerator(name="requisitionServiceSequence", sequenceName="requisitionservicenxtid")
    @GeneratedValue(generator="requisitionServiceSequence")
    private Long id;

    @ElementCollection
    @CollectionTable(
            name = "requisition_node_interface_service_categories",
            joinColumns=@JoinColumn(name = "service_id", referencedColumnName = "id")
    )
    @Column(name="name")
    protected Set<String> categories = new HashSet<>();

    @Column(name="name", nullable=false)
    protected String serviceName;

    @ManyToOne(optional = false)
    @JoinColumn(name="interface_id")
    private RequisitionInterfaceEntity ipInterface;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public void setCategories(Set<String> categories) {
        this.categories = categories;
    }

    public RequisitionMonitoredServiceEntity() {
    }

    public RequisitionMonitoredServiceEntity(String serviceName) {
        this.serviceName = serviceName;
    }

    public Set<String> getCategories() {
        return categories;
    }

    public void removeCategory(String category) {
        categories.remove(category);
    }

    public void addCategory(String category) {
        categories.add(category);
    }

    public String getServiceName() {
        return serviceName;
    }

    public void setServiceName(String value) {
        serviceName = value;
    }

    public RequisitionInterfaceEntity getIpInterface() {
        return ipInterface;
    }

    public void setIpInterface(RequisitionInterfaceEntity ipInterface) {
        this.ipInterface = ipInterface;
    }

    @Override
    public int hashCode() {
        if (getId() != null) {
            return getId().hashCode();
        }
        return super.hashCode();
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) return true;
        if (obj == null) return false;
        if (!(obj instanceof RequisitionMonitoredServiceEntity)) return false;
        if (getId() != null) {
            final RequisitionMonitoredServiceEntity other = (RequisitionMonitoredServiceEntity) obj;
            return getId().equals(other.getId());
        }
        return super.equals(obj);
    }
}
