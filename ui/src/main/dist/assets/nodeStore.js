import{l as T,r as a,A as o,b5 as Q}from"./index.js";const x=T("nodeStore",()=>{const c=a([]),i=a(0),u=a({}),d=a([]),f=a(0),l=a([]),g=a(0),p=a({}),I=a([]),y=a(0),N=a({limit:20,offset:0,orderBy:"label"}),m=a(new Map),w=async(t,e)=>{const s=await o.getNodes(t);if(s&&(i.value=s.totalCount,c.value=s.node,e===!0)){const r=s.node.map(n=>n.id);v(r,!1)}},C=async t=>{const e=await o.getNodeById(t.id);e&&(u.value=e)},b=async t=>{const e=await o.getNodeSnmpInterfaces(t.id,t.queryParameters);e&&(d.value=e.snmpInterface,f.value=e.totalCount)},q=async t=>{const e=await o.getNodeIpInterfaces(t.id,t.queryParameters);e&&(l.value=e.ipInterface,g.value=e.totalCount)},v=async(t,e)=>{if(t.length===0)return;const r={limit:0,_s:Q(t,e)},n=await o.getIpInterfaces(r);if(n)for(const P of t){const S=n.ipInterface.filter(A=>A.nodeId.toString()===P);m.value.set(P,S)}};return{nodes:c,totalCount:i,node:u,snmpInterfaces:d,snmpInterfacesTotalCount:f,ipInterfaces:l,ipInterfacesTotalCount:g,availability:p,nodeToIpInterfaceMap:m,nodeQueryParameters:N,outages:I,outagesTotalCount:y,getIpInterfacesForNodes:v,getNodes:w,getNodeById:C,getNodeSnmpInterfaces:b,getNodeIpInterfaces:q,getNodeAvailabilityPercentage:async t=>{const e=await o.getNodeAvailabilityPercentage(t);e&&(p.value=e)},getNodeOutages:async t=>{const e=await o.getNodeOutages(t.id,t.queryParameters);e&&(I.value=e.outage,y.value=e.totalCount)},setNodeQueryParameters:async t=>{N.value={...t}}}});export{x as u};
